{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/juc/2023-1-26.md","hash":"f20bceb605331e88a4e5d8fc38b9e4e7d1e1ee6c","modified":1675488431607},{"_id":"source/_posts/network-safety/ssh.md","hash":"4e7142db327e34228b3250c5272bc96a424d75d1","modified":1675776158933},{"_id":"source/_posts/DevOps/docker-compose.md","hash":"51bf2fe62b43057ce508bfaa084c682c6e17af8a","modified":1675776187894},{"_id":"source/_posts/network-safety/ca.md","hash":"1ec2d7ac22f0d5dffc43039e5cb3712819043d64","modified":1675776152292},{"_id":"source/_posts/juc/2023-1-26.assets/image-20230126130231130.png","hash":"ed510c5302b366bd90d6a2da5f150d53df5ba861","modified":1674709351201},{"_id":"source/_posts/DevOps/docker-compose.assets/image-20230206125858471.png","hash":"5a3b379c6fd79cd14076b96b04594d297b296f46","modified":1675659538486},{"_id":"source/_posts/DevOps/docker-compose.assets/image-20230206130317942.png","hash":"3b33193a6d846b5ef106699542f0f5f8366612b6","modified":1675659797950},{"_id":"source/_posts/juc/2023-1-26.assets/image-20230126130602513.png","hash":"ecebf9ebfcd0442162bd277dbda880f26c4d99fe","modified":1674709562652},{"_id":"themes/butterfly/README.md","hash":"15e7f6386b4fd3fa4a6c179ddf641e1ae57eafa2","modified":1675488333655},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1675488333654},{"_id":"themes/butterfly/package.json","hash":"822d83111feefd6a026b14fedef7871960ab434f","modified":1675488333799},{"_id":"themes/butterfly/README_CN.md","hash":"d0f7a24732855ae340f94e8286085d5387850cde","modified":1675488333658},{"_id":"themes/butterfly/_config.yml","hash":"880e19baee90d122bd2d954a4b9817c678b2647f","modified":1675778048478},{"_id":"themes/butterfly/languages/default.yml","hash":"a62bfe75c32dd0c2754b6fc70df027947ed1e711","modified":1675488333662},{"_id":"themes/butterfly/languages/en.yml","hash":"9d83a52e3fe3c086eadcdd9bca50829ca9b3a188","modified":1675488333664},{"_id":"themes/butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1675488333669},{"_id":"themes/butterfly/plugins.yml","hash":"8e3b5e44ff0e7e9c5779234bf21e1e70aeec5ae8","modified":1675488333801},{"_id":"themes/butterfly/layout/archive.pug","hash":"115fa5ee8864e5c97549eff91a17c66101d724ab","modified":1675488333668},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"30b69c969394392e4bdd3763873ceed0d473cfcb","modified":1675488333666},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"c2f1111d0cffddbf04248a7daa55c7895b9e4cf3","modified":1675488333665},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1675488333795},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1675488333799},{"_id":"themes/butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1675488333798},{"_id":"themes/butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1675488333797},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1675488333653},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1675488333652},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"d9ff4bad9c9664e12729c7a531169a05698a3fd1","modified":1675488333652},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"92683cb785a29e5a73701b33dba73d3afac268c3","modified":1675488333650},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1675488333654},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1675488333671},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"bfc28cb79e81f55c09672fb8e4372a71e0994761","modified":1675488333673},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"ab32b8d4ef682bd1d9b727b9d25a19dc06f3e68e","modified":1675488333675},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1675488333674},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"4f41fc46410e1e3018ff87e1d1a5c28be7258119","modified":1675488333715},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"c5c58714fb3cb839653e5c32e6094784c8662935","modified":1675488333711},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"25cd2d7c4d3f6836a157b73a2442a7712ff40b34","modified":1675488333691},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"5f96a28a4eac046b68ccc10e8c24ab01525e3245","modified":1675488333714},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1675488333882},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1675488333881},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"c4dac81869b33fa1590fae60a45b2e915a59c3ec","modified":1675488333889},{"_id":"themes/butterfly/source/js/main.js","hash":"f049b166073c4bcdccc6d8348774941a4e2c6d7b","modified":1675488333885},{"_id":"themes/butterfly/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1675488333879},{"_id":"themes/butterfly/source/js/utils.js","hash":"85a4f6e680ad2500ed114918158557ed85a8d89a","modified":1675488333890},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1675488333883},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1675488333804},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"39a2f0088841abb89b3b801469266cc9568fced0","modified":1675488333804},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"95479790234c291b064d031577d71214cdd1d820","modified":1675488333806},{"_id":"themes/butterfly/source/css/var.styl","hash":"63f12a6a847738b1479ce782c8caac5e0cf16a6b","modified":1675488333880},{"_id":"themes/butterfly/scripts/events/init.js","hash":"72605a00bf623b6cbc9fa0f90069ea2ae584c5c0","modified":1675488333807},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5fd6c9659262dc8f61d87866d0417fd534292c88","modified":1675488333811},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1675488333809},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"218add7e9b39b6fb6e69921abb9e44891a6cc3ce","modified":1675488333807},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"d33f0a055bacaa96ee5b69f821292d87658f4b0c","modified":1675488333811},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1675488333812},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1675488333814},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"40f85785d041b976f47a2828b0dc54346dcb62b0","modified":1675488333815},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"8ff03b35385f9162e1eb54dceb5fa7f781306caf","modified":1675488333814},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"ade8ce15cc7f41587e616f8e40f565081aee1c37","modified":1675488333815},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1675488333818},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"76343ac8422c9c8539082e77eda6ffee4b877eb2","modified":1675488333816},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"44cca49ddc76921bb455465ef912cab46c993cef","modified":1675488333817},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"bc74b7701ac07ff679b699d63e706935b37a8b7b","modified":1675488333819},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"e01a3967e5884881bab858b11635457df412de80","modified":1675488333819},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1675488333821},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1675488333821},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"56a5d41487d74654b75305c5325167a116495900","modified":1675488333822},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1675488333824},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"fd683ccc090db3122d77c7ee73e8d35dc8735ee3","modified":1675488333822},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4c7056d3cd56f10bd209d2ba4d3cc2027aad1440","modified":1675488333824},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"c8dbdfe6145a0bc6f7691c9551be8169a2698f0a","modified":1675488333677},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c7666a10448edd93f5ace37296051b7670495f1b","modified":1675488333678},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"f4b80b4a3ff5dd877b447b42d078f01ee3ecab24","modified":1675488333679},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1675488333680},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1675488333683},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1675488333681},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1675488333682},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1675488333684},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"e9f952f1b66a0116fccb812b14db0f229666e586","modified":1675488333685},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"40efa8e29460746b0d1253ce19b87eb035e25c47","modified":1675488333688},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"fd55f0e09827ef40c53c48d184a553464aac3e03","modified":1675488333682},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1675488333690},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"00ae419f527d8225a2dc03d4f977cec737248423","modified":1675488333696},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1675488333688},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"50b4b9c7f6a4771910be4198639cfcfc6d7b8925","modified":1675488333689},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"39847b8a1f0fad7889954a4ac936b7681949f16c","modified":1675488333698},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"767ca9b4dad126ba5fbd2f3ea5ca8d07c0d2b32c","modified":1675488333694},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1675488333706},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"9155f01d4c644a2e19b2b13b2d3c6d5e34dd0abf","modified":1675488333701},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"39c205027296dbd9fc9eb3cfd9d033bc5bd031b7","modified":1675488333703},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1675488333707},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"8f43fdeaf8cff4a35bab74b48c963786ca015620","modified":1675488333710},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1675488333716},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"a60d9cc9083142e3d92b618561abd557fcab502b","modified":1675488333708},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"594626a18b7efbf771232855dfbce143fb244bc6","modified":1675488333713},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1675488333771},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"cc1f7ae8a7ce5445277215821092e712ec8cc296","modified":1675488333712},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1675488333783},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4e37535c63149708ecbedb262336014524ad8723","modified":1675488333752},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1675488333773},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"558456d85100606c14e0a59801b0ee2ee67aadd9","modified":1675488333772},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"d4836a2ce1c87a59cfa8e4986346bf353710277f","modified":1675488333782},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1675488333783},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1675488333786},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1675488333785},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1675488333784},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"08641633d38903351a7424baf9893d9038ba057d","modified":1675488333784},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1675488333792},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"c02b1779bd0ebca6749f195be096b6ca574bfa29","modified":1675488333787},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1675488333788},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"59d979702fa21d960443824198614d63aaf69662","modified":1675488333787},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"9755cac8424dc578e9ec07dbcaa429fddbedd392","modified":1675488333789},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1675488333793},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"5e0e9e9b2cd3c256d52423e2278e790aa387a53a","modified":1675488333794},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"c424b1a3119ffb8396d80bb3585f48bd6777c917","modified":1675488333829},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"a2aa5caf338ff5323b6ff0601ebcc09e710d8398","modified":1675488333832},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1675488333842},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"6a7a926b72c5083aa14051a0eca8d49e1c6261f1","modified":1675488333828},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1675488333844},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"0abe05309a186682772a94e5e759b63f8028e61a","modified":1675488333845},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"077ce6932261cf51696834a25d1d988fec6cd7d0","modified":1675488333845},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1675488333847},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1675488333848},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"d33f2d9001a82d9a72d6f4088743762fbd016e4c","modified":1675488333846},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1675488333849},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"b0ba6f72848bc711bcf534c56b04ae14ab21b320","modified":1675488333848},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"7a12719a1ef2bce7d4056f2241251a71e92cd72c","modified":1675488333844},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"824b2b2d2ee72583b9e009c0bb13e29e806534cc","modified":1675488333851},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"7e9b65dcae7ac54e0183bc841fea0f4bd4d78e5c","modified":1675488333851},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"956ed11cc5d65941b49192b9be47cecfaed57a91","modified":1675488333852},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"b5ba2c3339ad406ce611d12d3f8cc84f864fbc03","modified":1675488333849},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"5dabc3a5330cc28f0666d1cd8db0d67f553fd854","modified":1675488333853},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1675488333855},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1675488333859},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"d072872714854cdc3d2975fb131ac31cb82b13e3","modified":1675488333853},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5dd1ba997741d02894ff846eda939ad8051c0bb2","modified":1675488333857},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a714776e3d585369f2285b6bb4e1564539c58d8b","modified":1675488333860},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1675488333863},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"d83389e07f8851f1b9afafe0eacd1bf10ad334ef","modified":1675488333862},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"e3e1b234a2595824576b8c9ed87af6d933f4e125","modified":1675488333865},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1675488333861},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"72a38c1dad7f55564b02c7a23e6ef39219edcd80","modified":1675488333868},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"cced94e70b4b90130cfa215582be2adbf883efba","modified":1675488333866},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1675488333869},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"7c463ba25b3b54f0f46dfd75971d792816e942a8","modified":1675488333870},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1675488333871},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1675488333872},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1675488333874},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1675488333874},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"ec81ea316c82b83d6aee31e52f248d329559d5d3","modified":1675488333876},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1675488333877},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"331c89ecfb79fab68466944a43e9e3d0ff49c646","modified":1675488333875},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1675488333876},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"73027a5e8b49d62b5b5a4d51663d5189f8eb7b4c","modified":1675488333887},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1675488333717},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"44b6d3fb2c9b437d85de751d83e2e92a0830451d","modified":1675488333888},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"645087801624a73cbee63269cfd399e9da39c663","modified":1675488333717},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"aff5c34b6061b281c66a986cf017e9021dc11ac6","modified":1675488333719},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1675488333719},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1675488333720},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"38b85d216d9377ddbaa2e5867e2f03805227237c","modified":1675488333720},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1675488333721},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3f59333064c4fc754c638f13a417b7be2569ca09","modified":1675488333724},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1675488333730},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1675488333728},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1675488333731},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1675488333731},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"d6a2a828689d619943838d42f2c3a45551e2c6c4","modified":1675488333738},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"a5ddcf84ce8855c7801289270009e29c3a103150","modified":1675488333733},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e703319ae5395273e81de11ba2366f21a104cf47","modified":1675488333734},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"3b551ab7618b36795480015b5cf565288df5b957","modified":1675488333740},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"fe599836225b835bd19fe1a6831fb4d41bcec071","modified":1675488333743},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"319463fc8ff993b798f2293b659b522ad7770cf0","modified":1675488333744},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"77729ecfae68ad21ff1d22ff2c8aa212f4d405c6","modified":1675488333745},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1675488333735},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"ca1337586aafc85e7f6d730ed0a1984a1a12aba7","modified":1675488333742},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1675488333748},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"5b44b4e5f2445260811de81edd3eeeb97d8bb583","modified":1675488333746},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1675488333748},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f04263a3bd7efb7f1b250cfee112e82f49805492","modified":1675488333749},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"ccb5c3f2a821b87986998595743387d7c997c16e","modified":1675488333750},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"77ac27a24b8347668c4df9d5c44c9461c69eaec9","modified":1675488333758},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"cd1ce86441dc508e4c3dbf8b829046455ba8a6b4","modified":1675488333759},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"d48d59ebf8c0142fb3c4592a0d35874f85e6fd4c","modified":1675488333750},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"cba55cbbd0962bf84b8956195e686b0e158ed247","modified":1675488333751},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"6b0d28671afd5ed286a714f25ba16256a2e7d880","modified":1675488333752},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"b2ede1f6b41026ebd233ac076a405889a6eec76b","modified":1675488333760},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"33368c0b80e4c4e78f3c7ee9bec0fed70ad838ca","modified":1675488333766},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1675488333761},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"91a72e94743befa21a7b1c557fbb3751efb87ab0","modified":1675488333765},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"bc207dcb771fc2c2c329f29d01708ff6b18443da","modified":1675488333763},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1675488333753},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"f434dce30f8faee0db5a8e4d2c81196b0e3605f4","modified":1675488333768},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1675488333754},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"2a39dd634a80a735359206a2481f8468f34a0b5c","modified":1675488333755},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"297d34d83e7bff8ec3b8bc19bb0f4d901c35fe5a","modified":1675488333756},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"af5d3d87b736598dafcf5871863596592cacdfe1","modified":1675488333775},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1675488333776},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"3b5ef84744a1a8fec5a63554079008040d96f924","modified":1675488333777},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1675488333779},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1675488333780},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1675488333780},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1675488333834},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1675488333837},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"8106bd031586f075a994956ee4438eb13be25d7b","modified":1675488333780},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1675488333839},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1675488333839},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1675488333842},{"_id":"public/archives/index.html","hash":"d72a879dbedd08939e012a454514a60ea3f99b59","modified":1675778107021},{"_id":"public/archives/2023/index.html","hash":"04025522631894606e4eb5277a2973de681b5434","modified":1675778107021},{"_id":"public/archives/2023/02/index.html","hash":"5c3bb059a2ddd58517fdf4e9d2a24000cb6d1476","modified":1675778107021},{"_id":"public/2023/02/06/DevOps/docker-compose/index.html","hash":"69ee8eac5963b3602287c73f74cbb7f30c8db631","modified":1675776202002},{"_id":"public/2023/02/04/juc/2023-1-26/index.html","hash":"1e75343be50cf177c104b110998af660305802af","modified":1675751615192},{"_id":"public/2023/02/04/network-safety/ssh/index.html","hash":"86f83ed9c29f7ecad94e6e804002252e4a18df18","modified":1675776202002},{"_id":"public/2023/02/04/network-safety/ca/index.html","hash":"a7a98d432a2d8864ea5f534358f852bf5ba36823","modified":1675776202002},{"_id":"public/index.html","hash":"f1d620880dd5054129fd0cd3a140d960c1ab217c","modified":1675778107021},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1675751615192},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1675751615192},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1675751615192},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1675751615192},{"_id":"public/js/utils.js","hash":"c9b4d8ec10a74f29cf1f9c4275f0cae3bd93b427","modified":1675751615192},{"_id":"public/js/search/local-search.js","hash":"ee86f52bb6558c51a6f31402c2e4ec1dcb81bb55","modified":1675751615192},{"_id":"public/js/search/algolia.js","hash":"5f4294337c28324e088908ed0ceb237a2a360ae5","modified":1675751615192},{"_id":"public/css/index.css","hash":"b8cb553c2428323c94548a9eaefc9dc03c044d47","modified":1675751615192},{"_id":"public/js/main.js","hash":"c0a3093c2485fa2121c10741e256170f211c7398","modified":1675751615192},{"_id":"public/js/tw_cn.js","hash":"76d0c5c172cae44b34b0bd3125fd068b2c3cbd4a","modified":1675751615192},{"_id":"source/_posts/test.md","hash":"026b3cdd4e88182159aa09135f5ea095a0255dd9","modified":1675776015998},{"_id":"source/_posts/juc/Java并发安全.md","hash":"fed6bad33cf83198aaad0c94c38cd3ea6793ca1b","modified":1675776310325},{"_id":"public/2023/02/07/test/index.html","hash":"2a72ca280483f2ab6eee4a622b58e86c3a789bde","modified":1675776202002},{"_id":"public/archives/2023/01/index.html","hash":"6f0aac46b44e0d1716eed7b568ad6777091d4334","modified":1675778107021},{"_id":"public/2023/01/26/juc/Java并发安全/index.html","hash":"198c8a871531f8db19e217d48f21bbca649a7cce","modified":1675778107021},{"_id":"public/tags/a/index.html","hash":"583b711fc5c51c7e755da8d1293f001ce92fd51c","modified":1675776202002},{"_id":"public/tags/b/index.html","hash":"2766ff8f65bf30d321ebb2210236c4181dd470a8","modified":1675776202002},{"_id":"public/tags/c/index.html","hash":"68b160957282fa5dab853c4a6bc7c12d1ca4fc4d","modified":1675776202002},{"_id":"public/tags/多线程并发/index.html","hash":"9f715d7223a18bbd83a99a1db14482eed6bd26be","modified":1675778107021},{"_id":"public/tags/Java/index.html","hash":"c0522390a7ea4f2b653ef04451aa28342b662584","modified":1675778107021},{"_id":"public/tags/基础/index.html","hash":"a976ff49f9d45044c46cefff3c820c9c023fa1e4","modified":1675776202002},{"_id":"public/tags/安全/index.html","hash":"a0216b888b2a13d6c66ea06bdf939f8636eb1bc0","modified":1675778107021},{"_id":"public/tags/an/index.html","hash":"78043a50d99e0b6cccaf63d81094b06996c6dc54","modified":1675776202002},{"_id":"public/tags/docker-compose/index.html","hash":"f4458c0b054ca11011eddee2e2f594884ef723e3","modified":1675776202002},{"_id":"public/tags/devops/index.html","hash":"e9dc3eeeea937ebd03428b0b68fbefc75a64052b","modified":1675778107021},{"_id":"source/_posts/safety/ca.md","hash":"1ec2d7ac22f0d5dffc43039e5cb3712819043d64","modified":1675776152292},{"_id":"source/_posts/safety/ssh.md","hash":"51358728b2821710173cd3527a3d496fa047558d","modified":1675776972083},{"_id":"source/_posts/devops/docker-compose.md","hash":"368990222de154752594a0450944e7fa9c28a5b6","modified":1675776301646},{"_id":"public/2023/02/04/safety/ca/index.html","hash":"d352e729d8cfeee49f340d01e375b397714043be","modified":1675778107021},{"_id":"public/2023/02/04/safety/ssh/index.html","hash":"c9429b8576a7896cb734aef8685ea7faaa7e667e","modified":1675778107021},{"_id":"public/2023/02/06/devops/docker-compose/index.html","hash":"22f122bfb31a96b5b770ba68eebf4bbce9c1c7ce","modified":1675778107021}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Java多线程并发之原子性问题","date":"2023-01-26T04:43:03.000Z","_content":"\n\n\n# Java Concurrency Util\n\n\n\n即juc是并发大师Doug Lea为了java并发设计的并发工具库。\n\n\n\n## 线程安全\n\n\n\n*线程安全问题*\n\n> 即多线程并发出现稀奇古怪无法理解的问题。\n\n如何解决线程安全问题?\n\n只要并发满足如下性质即可\n\n### 可见性\n\n\n\n> 即一个线程对一个变量修改后其余所有线程能立即知晓这个变量被修改了。\n\n\n\n这句描述可能很奇怪？难道我一个线程修改了一个变量，其他线程难道还不知道吗？\n\n不妨运行一下这个代码。\n\n```java\npublic class Visibility {\n\n    static boolean flag = true;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        new Thread(()->{\n            while (flag);\n        }).start();\n\n        Thread.sleep(1000);\n        flag = false;\n\n    }\n\n}\n```\n\n如果真的满足可见性，那么程序就立即退出了。如果不满足，那么程序就会一直运行下去。\n\n运行结果是程序一直处于运行状态，停不下来了。\n\n\n\n为什么？我们不妨从底层了解一下。\n\n\n\n\n\n> 当下CPU的处理速度是非常迅速的，高速的处理速度和低速的内存，严重不匹配的速率会极大的拖慢CPU的利用率，造成内存资源的浪费。\n\n**CPU的设计者肯定考虑到了这个问题，所以肯定是有解决方案的！！**\n\n解决方案就是通过增加缓存。\n\n![image-20230126130231130](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230126130231130.png)\n\n\n\nCPU在进行指令操作的时候必然是需要数据的，数据首先会从主存拷贝到缓存，然后由缓存拷贝到CPU寄存器内进行计算。\n\n关于高速缓存，量比较小，速度和CPU处理速度相当。\n\n\n\n**而且可能不止有一层。**\n\n![image-20230126130602513](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230126130602513.png)\n\n\n\n\n\n这个和线程的可见性有什么关系？\n\n> 有关系有很大的关系。\n>\n> **在多核条件下，只要存在缓存在不进行特殊处理的情况下就可能出现缓存的不一致。对于同一变量的缓存千差万别。**\n>\n> CPU的缓存不一致如何影响到线程呢？\n>\n> 线程的本质是什么？CPU的一段时间片。如果CPU存在缓存不一致，那么线程是否也存在呢？答案是一定的。\n\n\n\n我们知道java的多并发是安全的，然而CPU底层的并发是不具备可见性的，所以java的设计师一拍脑袋。这样下去不行啊，缓存不一致会导致java无法在服务端占据市场，得解决才行。所以就搞了一个JMM，解决了java的内存不一致问题。JMM于其说是一种技术不如说是一种规范，即你遵循我的规划，那么编译出来的class字节码在jvm上多线程并发是满足一致性的，当然你不遵循，那不好意思，我不确保。\n\n\n\n关于其延展的内容不在讲解，太多了，jmm，as-if-serial，happens before，MESI。\n\n\n\n### 有序性\n\njava在有jit技术即会对频繁调用的代码进行jit编译，jit的过程中一些指令并具有依赖关系，可能会进行重排序，来优化代码的执行效率，然而优化的代码在单线程不会有任何问题，多线程就说不定了。\n\n\n\n### 原子性\n\n即一次操作要么全部执行完成，要么就不执行，不存在执行一半的情况。它表示了，要么操作是不可分割的，最小的操作。\n\n\n\n\n\n","source":"_posts/juc/Java并发安全.md","raw":"---\ntitle: Java多线程并发之原子性问题\ndate: 2023-01-26 12:43:03\ntags:\n- 多线程并发\n- Java\n---\n\n\n\n# Java Concurrency Util\n\n\n\n即juc是并发大师Doug Lea为了java并发设计的并发工具库。\n\n\n\n## 线程安全\n\n\n\n*线程安全问题*\n\n> 即多线程并发出现稀奇古怪无法理解的问题。\n\n如何解决线程安全问题?\n\n只要并发满足如下性质即可\n\n### 可见性\n\n\n\n> 即一个线程对一个变量修改后其余所有线程能立即知晓这个变量被修改了。\n\n\n\n这句描述可能很奇怪？难道我一个线程修改了一个变量，其他线程难道还不知道吗？\n\n不妨运行一下这个代码。\n\n```java\npublic class Visibility {\n\n    static boolean flag = true;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        new Thread(()->{\n            while (flag);\n        }).start();\n\n        Thread.sleep(1000);\n        flag = false;\n\n    }\n\n}\n```\n\n如果真的满足可见性，那么程序就立即退出了。如果不满足，那么程序就会一直运行下去。\n\n运行结果是程序一直处于运行状态，停不下来了。\n\n\n\n为什么？我们不妨从底层了解一下。\n\n\n\n\n\n> 当下CPU的处理速度是非常迅速的，高速的处理速度和低速的内存，严重不匹配的速率会极大的拖慢CPU的利用率，造成内存资源的浪费。\n\n**CPU的设计者肯定考虑到了这个问题，所以肯定是有解决方案的！！**\n\n解决方案就是通过增加缓存。\n\n![image-20230126130231130](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230126130231130.png)\n\n\n\nCPU在进行指令操作的时候必然是需要数据的，数据首先会从主存拷贝到缓存，然后由缓存拷贝到CPU寄存器内进行计算。\n\n关于高速缓存，量比较小，速度和CPU处理速度相当。\n\n\n\n**而且可能不止有一层。**\n\n![image-20230126130602513](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230126130602513.png)\n\n\n\n\n\n这个和线程的可见性有什么关系？\n\n> 有关系有很大的关系。\n>\n> **在多核条件下，只要存在缓存在不进行特殊处理的情况下就可能出现缓存的不一致。对于同一变量的缓存千差万别。**\n>\n> CPU的缓存不一致如何影响到线程呢？\n>\n> 线程的本质是什么？CPU的一段时间片。如果CPU存在缓存不一致，那么线程是否也存在呢？答案是一定的。\n\n\n\n我们知道java的多并发是安全的，然而CPU底层的并发是不具备可见性的，所以java的设计师一拍脑袋。这样下去不行啊，缓存不一致会导致java无法在服务端占据市场，得解决才行。所以就搞了一个JMM，解决了java的内存不一致问题。JMM于其说是一种技术不如说是一种规范，即你遵循我的规划，那么编译出来的class字节码在jvm上多线程并发是满足一致性的，当然你不遵循，那不好意思，我不确保。\n\n\n\n关于其延展的内容不在讲解，太多了，jmm，as-if-serial，happens before，MESI。\n\n\n\n### 有序性\n\njava在有jit技术即会对频繁调用的代码进行jit编译，jit的过程中一些指令并具有依赖关系，可能会进行重排序，来优化代码的执行效率，然而优化的代码在单线程不会有任何问题，多线程就说不定了。\n\n\n\n### 原子性\n\n即一次操作要么全部执行完成，要么就不执行，不存在执行一半的情况。它表示了，要么操作是不可分割的，最小的操作。\n\n\n\n\n\n","slug":"juc/Java并发安全","published":1,"updated":"2023-02-07T13:25:10.325Z","_id":"cldu9nn990001rstegyho2o9d","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Java-Concurrency-Util\"><a href=\"#Java-Concurrency-Util\" class=\"headerlink\" title=\"Java Concurrency Util\"></a>Java Concurrency Util</h1><p>即juc是并发大师Doug Lea为了java并发设计的并发工具库。</p>\n<h2 id=\"线程安全\"><a href=\"#线程安全\" class=\"headerlink\" title=\"线程安全\"></a>线程安全</h2><p><em>线程安全问题</em></p>\n<blockquote>\n<p>即多线程并发出现稀奇古怪无法理解的问题。</p>\n</blockquote>\n<p>如何解决线程安全问题?</p>\n<p>只要并发满足如下性质即可</p>\n<h3 id=\"可见性\"><a href=\"#可见性\" class=\"headerlink\" title=\"可见性\"></a>可见性</h3><blockquote>\n<p>即一个线程对一个变量修改后其余所有线程能立即知晓这个变量被修改了。</p>\n</blockquote>\n<p>这句描述可能很奇怪？难道我一个线程修改了一个变量，其他线程难道还不知道吗？</p>\n<p>不妨运行一下这个代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Visibility</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (flag);</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果真的满足可见性，那么程序就立即退出了。如果不满足，那么程序就会一直运行下去。</p>\n<p>运行结果是程序一直处于运行状态，停不下来了。</p>\n<p>为什么？我们不妨从底层了解一下。</p>\n<blockquote>\n<p>当下CPU的处理速度是非常迅速的，高速的处理速度和低速的内存，严重不匹配的速率会极大的拖慢CPU的利用率，造成内存资源的浪费。</p>\n</blockquote>\n<p><strong>CPU的设计者肯定考虑到了这个问题，所以肯定是有解决方案的！！</strong></p>\n<p>解决方案就是通过增加缓存。</p>\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230126130231130.png\" alt=\"image-20230126130231130\"></p>\n<p>CPU在进行指令操作的时候必然是需要数据的，数据首先会从主存拷贝到缓存，然后由缓存拷贝到CPU寄存器内进行计算。</p>\n<p>关于高速缓存，量比较小，速度和CPU处理速度相当。</p>\n<p><strong>而且可能不止有一层。</strong></p>\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230126130602513.png\" alt=\"image-20230126130602513\"></p>\n<p>这个和线程的可见性有什么关系？</p>\n<blockquote>\n<p>有关系有很大的关系。</p>\n<p><strong>在多核条件下，只要存在缓存在不进行特殊处理的情况下就可能出现缓存的不一致。对于同一变量的缓存千差万别。</strong></p>\n<p>CPU的缓存不一致如何影响到线程呢？</p>\n<p>线程的本质是什么？CPU的一段时间片。如果CPU存在缓存不一致，那么线程是否也存在呢？答案是一定的。</p>\n</blockquote>\n<p>我们知道java的多并发是安全的，然而CPU底层的并发是不具备可见性的，所以java的设计师一拍脑袋。这样下去不行啊，缓存不一致会导致java无法在服务端占据市场，得解决才行。所以就搞了一个JMM，解决了java的内存不一致问题。JMM于其说是一种技术不如说是一种规范，即你遵循我的规划，那么编译出来的class字节码在jvm上多线程并发是满足一致性的，当然你不遵循，那不好意思，我不确保。</p>\n<p>关于其延展的内容不在讲解，太多了，jmm，as-if-serial，happens before，MESI。</p>\n<h3 id=\"有序性\"><a href=\"#有序性\" class=\"headerlink\" title=\"有序性\"></a>有序性</h3><p>java在有jit技术即会对频繁调用的代码进行jit编译，jit的过程中一些指令并具有依赖关系，可能会进行重排序，来优化代码的执行效率，然而优化的代码在单线程不会有任何问题，多线程就说不定了。</p>\n<h3 id=\"原子性\"><a href=\"#原子性\" class=\"headerlink\" title=\"原子性\"></a>原子性</h3><p>即一次操作要么全部执行完成，要么就不执行，不存在执行一半的情况。它表示了，要么操作是不可分割的，最小的操作。</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"Java-Concurrency-Util\"><a href=\"#Java-Concurrency-Util\" class=\"headerlink\" title=\"Java Concurrency Util\"></a>Java Concurrency Util</h1><p>即juc是并发大师Doug Lea为了java并发设计的并发工具库。</p>\n<h2 id=\"线程安全\"><a href=\"#线程安全\" class=\"headerlink\" title=\"线程安全\"></a>线程安全</h2><p><em>线程安全问题</em></p>\n<blockquote>\n<p>即多线程并发出现稀奇古怪无法理解的问题。</p>\n</blockquote>\n<p>如何解决线程安全问题?</p>\n<p>只要并发满足如下性质即可</p>\n<h3 id=\"可见性\"><a href=\"#可见性\" class=\"headerlink\" title=\"可见性\"></a>可见性</h3><blockquote>\n<p>即一个线程对一个变量修改后其余所有线程能立即知晓这个变量被修改了。</p>\n</blockquote>\n<p>这句描述可能很奇怪？难道我一个线程修改了一个变量，其他线程难道还不知道吗？</p>\n<p>不妨运行一下这个代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Visibility</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (flag);</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果真的满足可见性，那么程序就立即退出了。如果不满足，那么程序就会一直运行下去。</p>\n<p>运行结果是程序一直处于运行状态，停不下来了。</p>\n<p>为什么？我们不妨从底层了解一下。</p>\n<blockquote>\n<p>当下CPU的处理速度是非常迅速的，高速的处理速度和低速的内存，严重不匹配的速率会极大的拖慢CPU的利用率，造成内存资源的浪费。</p>\n</blockquote>\n<p><strong>CPU的设计者肯定考虑到了这个问题，所以肯定是有解决方案的！！</strong></p>\n<p>解决方案就是通过增加缓存。</p>\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230126130231130.png\" alt=\"image-20230126130231130\"></p>\n<p>CPU在进行指令操作的时候必然是需要数据的，数据首先会从主存拷贝到缓存，然后由缓存拷贝到CPU寄存器内进行计算。</p>\n<p>关于高速缓存，量比较小，速度和CPU处理速度相当。</p>\n<p><strong>而且可能不止有一层。</strong></p>\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230126130602513.png\" alt=\"image-20230126130602513\"></p>\n<p>这个和线程的可见性有什么关系？</p>\n<blockquote>\n<p>有关系有很大的关系。</p>\n<p><strong>在多核条件下，只要存在缓存在不进行特殊处理的情况下就可能出现缓存的不一致。对于同一变量的缓存千差万别。</strong></p>\n<p>CPU的缓存不一致如何影响到线程呢？</p>\n<p>线程的本质是什么？CPU的一段时间片。如果CPU存在缓存不一致，那么线程是否也存在呢？答案是一定的。</p>\n</blockquote>\n<p>我们知道java的多并发是安全的，然而CPU底层的并发是不具备可见性的，所以java的设计师一拍脑袋。这样下去不行啊，缓存不一致会导致java无法在服务端占据市场，得解决才行。所以就搞了一个JMM，解决了java的内存不一致问题。JMM于其说是一种技术不如说是一种规范，即你遵循我的规划，那么编译出来的class字节码在jvm上多线程并发是满足一致性的，当然你不遵循，那不好意思，我不确保。</p>\n<p>关于其延展的内容不在讲解，太多了，jmm，as-if-serial，happens before，MESI。</p>\n<h3 id=\"有序性\"><a href=\"#有序性\" class=\"headerlink\" title=\"有序性\"></a>有序性</h3><p>java在有jit技术即会对频繁调用的代码进行jit编译，jit的过程中一些指令并具有依赖关系，可能会进行重排序，来优化代码的执行效率，然而优化的代码在单线程不会有任何问题，多线程就说不定了。</p>\n<h3 id=\"原子性\"><a href=\"#原子性\" class=\"headerlink\" title=\"原子性\"></a>原子性</h3><p>即一次操作要么全部执行完成，要么就不执行，不存在执行一半的情况。它表示了，要么操作是不可分割的，最小的操作。</p>\n"},{"title":"CA证书那点事","date":"2023-02-04T04:04:40.692Z","_content":"\n\n\n\n\n# CA证书\n\n> CA证书是https必不可少的东西，它包含了非对称加密的公钥信息，以及证书持有方的基本信息，以及颁发机构的信息。主要还是为了保证公钥的权威性，确保公钥的来源是可信的。\n\n\n\n## 证书类型\n\n- der： .DER = DER扩展用于二进制DER编码证书。这些文件也可能承载CER或CRT扩展。\n- pem：使⽤Base64 ASCII进⾏编码的纯⽂本格式，是以“ - BEGIN …”前缀的ASCII（Base64）数据。\n- key：.KEY 扩展名用于公钥和私钥，常见使用于私钥。也可以被编码为二进制DER或ASCII PEM。\n- crs：证书签名请求。CSR文件是申请SSL证书时所需要的一个数据文件。\n- crt：CRT扩展用于证书。 证书可以被编码为二进制DER或ASCII PEM。 CER和CRT扩展几乎是同义词。 最常见的于Unix 或类Unix系统。通俗来讲，.CRT文件常在Linux系统使用，包含公钥和主体信息。\n- crt：.CRT的替代形式,您可以在微软系统环境下将.CRT转换为.CER（.both DER编码的.CER，或base64 [PEM]编码的.cer）。通俗来讲，就是.CER扩展文件是DER编码,并且.CER文件常在Windows系统使用。\n- p12：P12证书全称是PKCS#12。是一种交换数字证书的加密标准，用来描述个人身份信息。p12证书包含了私钥、公钥并且有口令保护，在证书泄露后还有最后一道保障——证书口令，不知道正确的证书口令无法提取秘钥（文件的扩展名能够为pfx或p12）\n- pfx：PFX也是由PKCS#12标准定义，包含了公钥和私钥的二进制格式的证书形式，以pfx做为证书文件后缀名（文件的扩展名能够为pfx或p12）\n- jks：JKS是JAVA的keytools证书工具支持的证书私钥格式\n  \n\n\n\n## 自签CA证书\n\n\n\n### 环境需要\n\n- openssl\n\n\n\n### 生成私钥\n\n```shell\nopenssl genrsa -out ca.key 2048\n```\n\n- out输出文件名称\n- 2048输出长度\n\n\n\n### 生成根证书\n\n```shell\n openssl req -new -x509 -days 3650 -key a.key -out a.crt\n```\n\n- req表示行为为证书请求\n- -new 生成证书\n- -x509生成x509格式证书\n- -day证书有效期\n- -key私钥\n- -out输出文件名称\n\n需要信息填写：（可以乱写）\n\n\n\n点击证书查看详细可以发现处于证书链的top因此叫根证书。\n\n\n\n\n\n### 生成服务端证书\n\n> 同之前根证书的生成\n\n```shell\nopenssl genrsa -out server.key 2048\n```\n\n\n\n> 生成request文件即crt文件\n\n```shell\nopenssl req -new -key server.key -out server.csr\n```\n\n与根证书类似，只是少了-x509.\n\n> Note:\n>\n> Common Name (e.g. server FQDN or YOUR name) []:\n>\n> 不能乱写，需要填上授权主机的域名，或者ip，否则客户端校验的过程会出错。\n>\n> \n>\n> A challenge password []:\n>\n> 可以不填，但是如果填了，客户端证书的密码需要和其一致。\n\n\n\n\n\n> 生成服务端证书\n\n```shell\nopenssl x509 -req -sha256 -in server.csr -CA a.crt -CAkey a.key -CAcreateserial -days 3650 -out server.crt\n```\n\n- -sha256摘要格式\n- -CA由哪个ca机构颁发\n- -CAcreateserial 生成唯一序列号\n\n\n\n### 生成客户端证书\n\n\n\n> 生成公钥加密私钥\n\n```shell\nopenssl genrsa -out client.key 2048\n```\n\n\n\n> 生成req文件\n\n```shell\n openssl req -new -key client.key -out client.csr\n```\n\n\n\n> 根据生成客户端证书\n\n```shell\nopenssl x509 -req -sha256 -in client.csr -CA a.crt -CAkey a.key -CAcreateserial -days 3650 -out client.crt\n```\n\n","source":"_posts/safety/ca.md","raw":"---\ntitle: CA证书那点事\ndate: ‎2023‎-‎2‎-‎3‎ ‏‎19:43:59\ntags:\n- 安全\n---\n\n\n\n\n\n# CA证书\n\n> CA证书是https必不可少的东西，它包含了非对称加密的公钥信息，以及证书持有方的基本信息，以及颁发机构的信息。主要还是为了保证公钥的权威性，确保公钥的来源是可信的。\n\n\n\n## 证书类型\n\n- der： .DER = DER扩展用于二进制DER编码证书。这些文件也可能承载CER或CRT扩展。\n- pem：使⽤Base64 ASCII进⾏编码的纯⽂本格式，是以“ - BEGIN …”前缀的ASCII（Base64）数据。\n- key：.KEY 扩展名用于公钥和私钥，常见使用于私钥。也可以被编码为二进制DER或ASCII PEM。\n- crs：证书签名请求。CSR文件是申请SSL证书时所需要的一个数据文件。\n- crt：CRT扩展用于证书。 证书可以被编码为二进制DER或ASCII PEM。 CER和CRT扩展几乎是同义词。 最常见的于Unix 或类Unix系统。通俗来讲，.CRT文件常在Linux系统使用，包含公钥和主体信息。\n- crt：.CRT的替代形式,您可以在微软系统环境下将.CRT转换为.CER（.both DER编码的.CER，或base64 [PEM]编码的.cer）。通俗来讲，就是.CER扩展文件是DER编码,并且.CER文件常在Windows系统使用。\n- p12：P12证书全称是PKCS#12。是一种交换数字证书的加密标准，用来描述个人身份信息。p12证书包含了私钥、公钥并且有口令保护，在证书泄露后还有最后一道保障——证书口令，不知道正确的证书口令无法提取秘钥（文件的扩展名能够为pfx或p12）\n- pfx：PFX也是由PKCS#12标准定义，包含了公钥和私钥的二进制格式的证书形式，以pfx做为证书文件后缀名（文件的扩展名能够为pfx或p12）\n- jks：JKS是JAVA的keytools证书工具支持的证书私钥格式\n  \n\n\n\n## 自签CA证书\n\n\n\n### 环境需要\n\n- openssl\n\n\n\n### 生成私钥\n\n```shell\nopenssl genrsa -out ca.key 2048\n```\n\n- out输出文件名称\n- 2048输出长度\n\n\n\n### 生成根证书\n\n```shell\n openssl req -new -x509 -days 3650 -key a.key -out a.crt\n```\n\n- req表示行为为证书请求\n- -new 生成证书\n- -x509生成x509格式证书\n- -day证书有效期\n- -key私钥\n- -out输出文件名称\n\n需要信息填写：（可以乱写）\n\n\n\n点击证书查看详细可以发现处于证书链的top因此叫根证书。\n\n\n\n\n\n### 生成服务端证书\n\n> 同之前根证书的生成\n\n```shell\nopenssl genrsa -out server.key 2048\n```\n\n\n\n> 生成request文件即crt文件\n\n```shell\nopenssl req -new -key server.key -out server.csr\n```\n\n与根证书类似，只是少了-x509.\n\n> Note:\n>\n> Common Name (e.g. server FQDN or YOUR name) []:\n>\n> 不能乱写，需要填上授权主机的域名，或者ip，否则客户端校验的过程会出错。\n>\n> \n>\n> A challenge password []:\n>\n> 可以不填，但是如果填了，客户端证书的密码需要和其一致。\n\n\n\n\n\n> 生成服务端证书\n\n```shell\nopenssl x509 -req -sha256 -in server.csr -CA a.crt -CAkey a.key -CAcreateserial -days 3650 -out server.crt\n```\n\n- -sha256摘要格式\n- -CA由哪个ca机构颁发\n- -CAcreateserial 生成唯一序列号\n\n\n\n### 生成客户端证书\n\n\n\n> 生成公钥加密私钥\n\n```shell\nopenssl genrsa -out client.key 2048\n```\n\n\n\n> 生成req文件\n\n```shell\n openssl req -new -key client.key -out client.csr\n```\n\n\n\n> 根据生成客户端证书\n\n```shell\nopenssl x509 -req -sha256 -in client.csr -CA a.crt -CAkey a.key -CAcreateserial -days 3650 -out client.crt\n```\n\n","slug":"safety/ca","published":1,"updated":"2023-02-07T13:22:32.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clduaihbb0000bote6w9i6u2k","content":"<h1 id=\"CA证书\"><a href=\"#CA证书\" class=\"headerlink\" title=\"CA证书\"></a>CA证书</h1><blockquote>\n<p>CA证书是https必不可少的东西，它包含了非对称加密的公钥信息，以及证书持有方的基本信息，以及颁发机构的信息。主要还是为了保证公钥的权威性，确保公钥的来源是可信的。</p>\n</blockquote>\n<h2 id=\"证书类型\"><a href=\"#证书类型\" class=\"headerlink\" title=\"证书类型\"></a>证书类型</h2><ul>\n<li>der： .DER = DER扩展用于二进制DER编码证书。这些文件也可能承载CER或CRT扩展。</li>\n<li>pem：使⽤Base64 ASCII进⾏编码的纯⽂本格式，是以“ - BEGIN …”前缀的ASCII（Base64）数据。</li>\n<li>key：.KEY 扩展名用于公钥和私钥，常见使用于私钥。也可以被编码为二进制DER或ASCII PEM。</li>\n<li>crs：证书签名请求。CSR文件是申请SSL证书时所需要的一个数据文件。</li>\n<li>crt：CRT扩展用于证书。 证书可以被编码为二进制DER或ASCII PEM。 CER和CRT扩展几乎是同义词。 最常见的于Unix 或类Unix系统。通俗来讲，.CRT文件常在Linux系统使用，包含公钥和主体信息。</li>\n<li>crt：.CRT的替代形式,您可以在微软系统环境下将.CRT转换为.CER（.both DER编码的.CER，或base64 [PEM]编码的.cer）。通俗来讲，就是.CER扩展文件是DER编码,并且.CER文件常在Windows系统使用。</li>\n<li>p12：P12证书全称是PKCS#12。是一种交换数字证书的加密标准，用来描述个人身份信息。p12证书包含了私钥、公钥并且有口令保护，在证书泄露后还有最后一道保障——证书口令，不知道正确的证书口令无法提取秘钥（文件的扩展名能够为pfx或p12）</li>\n<li>pfx：PFX也是由PKCS#12标准定义，包含了公钥和私钥的二进制格式的证书形式，以pfx做为证书文件后缀名（文件的扩展名能够为pfx或p12）</li>\n<li>jks：JKS是JAVA的keytools证书工具支持的证书私钥格式</li>\n</ul>\n<h2 id=\"自签CA证书\"><a href=\"#自签CA证书\" class=\"headerlink\" title=\"自签CA证书\"></a>自签CA证书</h2><h3 id=\"环境需要\"><a href=\"#环境需要\" class=\"headerlink\" title=\"环境需要\"></a>环境需要</h3><ul>\n<li>openssl</li>\n</ul>\n<h3 id=\"生成私钥\"><a href=\"#生成私钥\" class=\"headerlink\" title=\"生成私钥\"></a>生成私钥</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out ca.key 2048</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>out输出文件名称</li>\n<li>2048输出长度</li>\n</ul>\n<h3 id=\"生成根证书\"><a href=\"#生成根证书\" class=\"headerlink\" title=\"生成根证书\"></a>生成根证书</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -x509 -days 3650 -key a.key -out a.crt</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>req表示行为为证书请求</li>\n<li>-new 生成证书</li>\n<li>-x509生成x509格式证书</li>\n<li>-day证书有效期</li>\n<li>-key私钥</li>\n<li>-out输出文件名称</li>\n</ul>\n<p>需要信息填写：（可以乱写）</p>\n<p>点击证书查看详细可以发现处于证书链的top因此叫根证书。</p>\n<h3 id=\"生成服务端证书\"><a href=\"#生成服务端证书\" class=\"headerlink\" title=\"生成服务端证书\"></a>生成服务端证书</h3><blockquote>\n<p>同之前根证书的生成</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out server.key 2048</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>生成request文件即crt文件</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -key server.key -out server.csr</span><br></pre></td></tr></table></figure>\n\n<p>与根证书类似，只是少了-x509.</p>\n<blockquote>\n<p>Note:</p>\n<p>Common Name (e.g. server FQDN or YOUR name) []:</p>\n<p>不能乱写，需要填上授权主机的域名，或者ip，否则客户端校验的过程会出错。</p>\n<p>A challenge password []:</p>\n<p>可以不填，但是如果填了，客户端证书的密码需要和其一致。</p>\n</blockquote>\n<blockquote>\n<p>生成服务端证书</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -sha256 -in server.csr -CA a.crt -CAkey a.key -CAcreateserial -days 3650 -out server.crt</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-sha256摘要格式</li>\n<li>-CA由哪个ca机构颁发</li>\n<li>-CAcreateserial 生成唯一序列号</li>\n</ul>\n<h3 id=\"生成客户端证书\"><a href=\"#生成客户端证书\" class=\"headerlink\" title=\"生成客户端证书\"></a>生成客户端证书</h3><blockquote>\n<p>生成公钥加密私钥</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out client.key 2048</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>生成req文件</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -key client.key -out client.csr</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>根据生成客户端证书</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -sha256 -in client.csr -CA a.crt -CAkey a.key -CAcreateserial -days 3650 -out client.crt</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"CA证书\"><a href=\"#CA证书\" class=\"headerlink\" title=\"CA证书\"></a>CA证书</h1><blockquote>\n<p>CA证书是https必不可少的东西，它包含了非对称加密的公钥信息，以及证书持有方的基本信息，以及颁发机构的信息。主要还是为了保证公钥的权威性，确保公钥的来源是可信的。</p>\n</blockquote>\n<h2 id=\"证书类型\"><a href=\"#证书类型\" class=\"headerlink\" title=\"证书类型\"></a>证书类型</h2><ul>\n<li>der： .DER = DER扩展用于二进制DER编码证书。这些文件也可能承载CER或CRT扩展。</li>\n<li>pem：使⽤Base64 ASCII进⾏编码的纯⽂本格式，是以“ - BEGIN …”前缀的ASCII（Base64）数据。</li>\n<li>key：.KEY 扩展名用于公钥和私钥，常见使用于私钥。也可以被编码为二进制DER或ASCII PEM。</li>\n<li>crs：证书签名请求。CSR文件是申请SSL证书时所需要的一个数据文件。</li>\n<li>crt：CRT扩展用于证书。 证书可以被编码为二进制DER或ASCII PEM。 CER和CRT扩展几乎是同义词。 最常见的于Unix 或类Unix系统。通俗来讲，.CRT文件常在Linux系统使用，包含公钥和主体信息。</li>\n<li>crt：.CRT的替代形式,您可以在微软系统环境下将.CRT转换为.CER（.both DER编码的.CER，或base64 [PEM]编码的.cer）。通俗来讲，就是.CER扩展文件是DER编码,并且.CER文件常在Windows系统使用。</li>\n<li>p12：P12证书全称是PKCS#12。是一种交换数字证书的加密标准，用来描述个人身份信息。p12证书包含了私钥、公钥并且有口令保护，在证书泄露后还有最后一道保障——证书口令，不知道正确的证书口令无法提取秘钥（文件的扩展名能够为pfx或p12）</li>\n<li>pfx：PFX也是由PKCS#12标准定义，包含了公钥和私钥的二进制格式的证书形式，以pfx做为证书文件后缀名（文件的扩展名能够为pfx或p12）</li>\n<li>jks：JKS是JAVA的keytools证书工具支持的证书私钥格式</li>\n</ul>\n<h2 id=\"自签CA证书\"><a href=\"#自签CA证书\" class=\"headerlink\" title=\"自签CA证书\"></a>自签CA证书</h2><h3 id=\"环境需要\"><a href=\"#环境需要\" class=\"headerlink\" title=\"环境需要\"></a>环境需要</h3><ul>\n<li>openssl</li>\n</ul>\n<h3 id=\"生成私钥\"><a href=\"#生成私钥\" class=\"headerlink\" title=\"生成私钥\"></a>生成私钥</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out ca.key 2048</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>out输出文件名称</li>\n<li>2048输出长度</li>\n</ul>\n<h3 id=\"生成根证书\"><a href=\"#生成根证书\" class=\"headerlink\" title=\"生成根证书\"></a>生成根证书</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -x509 -days 3650 -key a.key -out a.crt</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>req表示行为为证书请求</li>\n<li>-new 生成证书</li>\n<li>-x509生成x509格式证书</li>\n<li>-day证书有效期</li>\n<li>-key私钥</li>\n<li>-out输出文件名称</li>\n</ul>\n<p>需要信息填写：（可以乱写）</p>\n<p>点击证书查看详细可以发现处于证书链的top因此叫根证书。</p>\n<h3 id=\"生成服务端证书\"><a href=\"#生成服务端证书\" class=\"headerlink\" title=\"生成服务端证书\"></a>生成服务端证书</h3><blockquote>\n<p>同之前根证书的生成</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out server.key 2048</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>生成request文件即crt文件</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -key server.key -out server.csr</span><br></pre></td></tr></table></figure>\n\n<p>与根证书类似，只是少了-x509.</p>\n<blockquote>\n<p>Note:</p>\n<p>Common Name (e.g. server FQDN or YOUR name) []:</p>\n<p>不能乱写，需要填上授权主机的域名，或者ip，否则客户端校验的过程会出错。</p>\n<p>A challenge password []:</p>\n<p>可以不填，但是如果填了，客户端证书的密码需要和其一致。</p>\n</blockquote>\n<blockquote>\n<p>生成服务端证书</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -sha256 -in server.csr -CA a.crt -CAkey a.key -CAcreateserial -days 3650 -out server.crt</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-sha256摘要格式</li>\n<li>-CA由哪个ca机构颁发</li>\n<li>-CAcreateserial 生成唯一序列号</li>\n</ul>\n<h3 id=\"生成客户端证书\"><a href=\"#生成客户端证书\" class=\"headerlink\" title=\"生成客户端证书\"></a>生成客户端证书</h3><blockquote>\n<p>生成公钥加密私钥</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out client.key 2048</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>生成req文件</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -key client.key -out client.csr</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>根据生成客户端证书</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -sha256 -in client.csr -CA a.crt -CAkey a.key -CAcreateserial -days 3650 -out client.crt</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Docker Compose","date":"2023-02-06T03:00:58.000Z","_content":"\n\n\n# [Docker Compose](https://docs.docker.com/compose/) \n\n> Compose是一个用于管理多容器的工具，仅用一个yaml文件，一条指令即可创建，开启,停止所有的服务\n\n\n\n## [Docker Compose 文件语法](https://docs.docker.com/compose/compose-file/#compose-file)\n\n\n\n> Compose 文件是一个yaml格式的文件。文件内容包含version，services，networks,volumns,configs,secrets\n\n\n\n### yaml\n\n\n\n#### 多行缩进\n\n> 一种描述数据的标记语言，类似于xml,json等。\n\n数据结构可以用类似大纲的缩排方式呈现，结构通过缩进来表示，连续的项目通过减号“-”来表示，map结构里面的key/value对用冒号“:”来分隔。样例如下：\n\n```yaml\nhouse:\n  family:\n    name: Doe\n    parents:\n      - John\n      - Jane\n    children:\n      - Paul\n      - Mark\n      - Simone\n  address:\n    number: 34\n    street: Main Street\n    city: Nowheretown\n    zipcode: 12345\n```\n\n\n\n> 等同于如下Java语法描述的数据\n\n```java\nclass House {\n    Family f;\n    Address a;\n    public House(Family f,Address a) {\n        //...\n    }\n}\nclass Family {\n    String name;\n    List<String> parents;\n    List<String> children;\n    public Family(String name,List<String> parents,List<String> children){\n        //...\n    }\n}\nclass Address {\n    int number;\n    String street;\n    String city;\n    int zipcode;\n    public Address(int number,String street,String city,int zipcode) {\n        //...\n    }\n}\n```\n\n```java\nnew House(\n    new Family(\"Doe\",List.of(\"John\",\"Jane\"),List.of(\"Paul\",\"Mark\",\"Simone\")),\n    new Address(34,\"Main Street\",\"Nowheretown\",1234)\n)\n```\n\n\n\nNotes:\n\n1. 字串不一定要用双引号标识；\n2. 在缩排中空白字符的数目并不是非常重要，只要相同阶层的元素左侧**对齐**就可以了（**不过不能使用TAB字符**）\n3. 允许在文件中加入选择性的空行，以增加可读性；\n4. 在一个档案中，可同时包含多个文件，并用“——”分隔；\n5. 选择性的符号“...”可以用来表示档案结尾（在利用串流的通讯中，这非常有用，可以在不关闭串流的情况下，发送结束讯号）。\n\n\n\n#### 单行缩进\n\n> 描述的同一结构的不同写法,个人感觉简洁是简洁，但是可读性是真的不太邢。docker compose官网实例基本是采用的多行缩进。\n\n```yaml\nhouse:\n  family: { name: Doe, parents: [John, Jane], children: [Paul, Mark, Simone] }\n  address: { number: 34, street: Main Street, city: Nowheretown, zipcode: 12345 }\n```\n\n\n\n### versions\n\n```yaml\nversions: \n```\n\n确认compose的版本号(官方不推荐我们写,此处为了向后兼容)\n\n> A Compose implementation SHOULD NOT use this version to select an exact schema to validate the Compose file, but prefer the most recent schema at the time it has been designed.\n\n\n\n\n\n### services\n\n> A Service is an abstract definition of a computing resource within an application which can be scaled/replaced independently from other components. Services are backed by a set of containers, run by the platform according to replication requirements and placement constraints. Being backed by containers, Services are defined by a Docker image and set of runtime arguments. All containers within a service are identically created with these arguments.\n>\n> Service是执行资源的抽象定义，services的背后是container的集合，运行的container是其实就是由docker image和运行时环境变量组成的services定义的。\n\n\n\n#### build\n\n> container需要镜像才能创建，镜像可以是远端的，也可以是自己构建的，build参数可以用以声明自定义的镜像。\n\n\n\n#### [blkio_config](https://docs.docker.com/compose/compose-file/#blkio_config)\n\nblocking io configuration。用于配置io，使用或许较少。\n\n\n\n#### [configs](https://docs.docker.com/compose/compose-file/#configs)\n\n> `configs` grant access to configs on a per-service basis using the per-service `configs` configuration\n>\n> 表示允许访问指定的configs，每一个service都使用自己的configs，来区分不同的配置。\n>\n> 值得注意的是，使用configs之前得定义configs\n\n\n\n> configs有两中格式，shorts syntax，long syntax\n\n\n\n- short syntax\n\n> The short syntax variant only specifies the config name. This grants the container access to the config and mounts it at `/<config_name>` within the container. The source name and destination mount point are both set to the config name\n>\n> short syntax的写法只需要声明config的名称，之后该config文件就会被mount在container的**/<config_name>** 路径下。\n\n> 声明了两个configs：\n>\n> - my_config\n> - my_config\n>\n> 其中redis（service名称，随意定义）服务可以使用my_config\n\n\n\n```yaml\nservices:\n  redis:\n    image: redis:latest\n    configs:\n      - my_config\nconfigs:\n  my_config:\n    file: ./my_config.txt\n  my_other_config:\n    external: true\n\n```\n\n\n\n调用docker compose up以后，生成了如下的一个集群。这个集群里面包含一个redis container\n\n![image-20230206125858471](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206125858471.png)\n\n\n\n进入容器查看内容\n\n![image-20230206130317942](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206130317942.png)\n\n\n\n由于没有创建config文件，自动创建了一个文件夹。**是文件夹**！！\n\n![image-20230206130546271](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206130546271.png)\n\n\n\n而且还与本地路径的my_config做了挂载（docker compose up创建容器之后new的文件）\n\n![image-20230206130714732](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206130714732.png)\n\n容器内也有对应的文件\n\n![image-20230206130833120](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206130833120.png)\n\n\n\n在docker compose up之前创建了文件，会把这个文件映射到docker容器内。\n\n![image-20230206131035221](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206131035221.png)\n\n\n\n![image-20230206131219023](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206131219023.png)\n\n\n\n文件内容的修改也会同步到compose的文件中\n\n\n\n\n\n- #### Long syntax\n\n> short syntax 虽然简单，但是不能精确得控制配置文件的属性，细粒度不够。long syntax 通过如下属性控制配置文件\n>\n> - `source`: 选用哪个配置\n> - `target`: 文件挂载到container的哪个位置，如果不指定就默认挂载到/<source> \n> - `uid` and `gid`: config文件的所属uid和gid，用处不大。\n> - `mode`: unix文件权限号。\n\n\n\n选用my_config,挂载在/redis_config， owner uid 为103，gid为103，只有owner和group有读权限。\n\n```yaml\nservices:\n  redis:\n    image: redis:latest\n    configs:\n      - source: my_config\n        target: /redis_config\n        uid: \"103\"\n        gid: \"103\"\n        mode: 0440\nconfigs:\n  my_config:\n    external: true\n  my_other_config:\n    external: true\n\n```\n\n\n\n![image-20230206132933367](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206132933367.png)\n\n\n\n![image-20230206132911472](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206132911472.png)\n\n\n\n\n\n\n\n#### container_name\n\n> 用于指定container的名称\n\n\n\n#### depends_on\n\n> 指定容器的依赖关系，微服务开启和关闭。\n>\n> 开启服务和关闭服务采用拓扑排序。\n\n\n\n#### hostname\n\n> 定义一个自定义主机名\n\n\n\n```yaml\nservices:\n  nginx:\n    hostname: ng\n    image: nginx \n  test:\n    image: nginx\n```\n\n\n\n生成两个容器\n\n![image-20230206142204093](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206142204093.png)\n\n\n\n在test容器内使用hostname为一串杂凑值\n\n![image-20230206143720523](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206143720523.png)\n\n\n\nng容器的hostname为ng\n\n![image-20230206143841598](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206143841598.png)\n\n\n\n#### links\n\n> 定义和其他service的网络连接，定义方式有两种：\n>\n> - <serviceName> \n> - <serviceName>:<alias>\n\n```yaml\nweb:\n  links:\n    - db\n    - db:database\n    - redis\n```\n\n\n\n#### networks\n\n> 定义service加入的网络，network的定义需要在顶层声明networks，然后进行配置。\n\n如下some-service，加入了some-network和other-network。\n\n```yaml\nservices:\n  some-service:\n    networks:\n      - some-network\n      - other-network\n```\n\n\n\n#### ports\n\n> 端口映射，将容器端口和宿主机端口进行绑定。\n\n语法格式分为两类\n\n- Short Syntax\n\n> 是一个以冒号分隔的字符串语法如下\n>\n> [host:]contianer[/protocol]\n>\n> - host  指 [ip:]\\(port | range)\n> - container 指 port | range\n> - protocol 指协议大多是tcp udp\n\n```yaml\nports:\n  - \"3000\"\n  - \"3000-3005\"\n  - \"8000:8000\"\n  - \"9090-9091:8080-8081\"\n  - \"49100:22\"\n  - \"127.0.0.1:8001:8001\"\n  - \"127.0.0.1:5000-5010:5000-5010\"\n  - \"6060:6060/udp\"\n\n```\n\n- Long Syntax\n\n> 相比于short syntax，有更加精细的粒度\n>\n> - `target`: 容器端口\n> - `published`: container暴露的duan'kduank偶.\n> - `host_ip`: 主机进行映射的接口，如果不设置默认为全部接口i(`0.0.0.0`)\n> - `protocol`: 端口采用xie'yxieyi  (`tcp` or `udp`), 不声明默认是所有协议\n> - `mode`: `host` 用于与宿主机做映射, or `ingress` 用于做负载均衡.\n\n\n\n#### restart\n\n> container终止后处理策略\n>\n> - `no`: 什么都不做 \t\n> - `always`:  如果container没有被移除尝试重启.\n> - `on-failure`: 如果是因为出错而终止，进行重启.\n> - `unless-stopped`: 如果container被stop了或者remove了不重启，此外进行重启。\n\n\n\n#### secrets\n\n> 准许service访问敏感文件，语法分为两类\n\n- #### Short syntax\n\n> 只需要声明secret的名称，container只有read权限，并且文件将被mount在contianer 的/run/secrets/<secret_name>路径下\n\n\n\n文件将被挂载在/run/secrets/server-certificate\n\n```yaml\nservices:\n  frontend:\n    image: awesome/webapp\n    secrets:\n      - server-certificate\nsecrets:\n  server-certificate:\n    file: ./server.cert\n\n```\n\n\n\n- #### Long syntax\n> \n  - `source`:  secrets项\n  - `target`:  挂载在`/run/secrets`路径的文件的名称\n  - `uid` and `gid`: secret 文件的owner和所属组id\n  - `mode`:  unix文件权限\n\n  ```yaml\n  services:\n    frontend:\n      image: awesome/webapp\n      secrets:\n        - source: server-certificate\n          target: server.cert\n          uid: \"103\"\n          gid: \"103\"\n          mode: 0440\n  secrets:\n    server-certificate:\n      external: true\n  ```\n\n\n\n\n\n#### volumes\n\n> 定义宿主机和container容器的映射关系。语法格式分为长短两种。\n>\n> 如果该数据卷只能由一个service使用，那么这个属性作为service的一部分，不需要额外声明顶层的volumes。\n\n- Short Syntax\n\n>  以分号为间隔，分为两种语法。\n>\n> - volume: container_path\n> - volume: container_path: access_mode\\\n>\n> volume: 宿主机的路径或者卷的名称\n>\n> container_path:  卷挂载在宿主机的路径\n>\n> access_mode: 以逗号分隔的选项，可以是rw，ro，z，Z，读写，只读，不同容器共享，不同容器不共享。\n\n- Long Syntax\n\n> - `type`: 挂载类型 `volume`, `bind`, `tmpfs` or `npipe`\n>\n> - `source`: 挂载源头, 要么是宿主机的路径, 或者是[`top-level `volumes` key](https://docs.docker.com/compose/compose-file/#volumes-top-level-element). Not applicable for a tmpfs mount.\n>\n> - `target`: 卷挂载在container的位置\n>\n> - `read_only`:  暗示卷制度\n>\n>   : configure additional bind options\n>\n>   - `propagation`: the propagation mode used for the bind\n>  - `create_host_path`: create a directory at the source path on host if there is nothing present. Do nothing if there is something present at the path. This is automatically implied by short syntax for backward compatibility with docker-compose legacy.\n>   - `selinux`: the SELinux re-labeling option `z` (shared) or `Z` (private)\n> \n> - `volume`: configure additional volume options\n>\n>   - `nocopy`: flag to disable copying of data from a container when a volume is created\n>\n> - `tmpfs`\n>\n>   : configure additional tmpfs options\n>\n>   - `size`: the size for the tmpfs mount in bytes (either numeric or as bytes unit)\n>  - `mode`: the filemode for the tmpfs mount as Unix permission bits as an octal number\n> \n>- `consistency`: the consistency requirements of the mount. Available values are platform specific\n\n\n\n#### working_dir \n\n> 覆写container中由image(Dockerfile workdir)指定的工作路径\n\n\n\n### networks\n\n> 用与不同容器间的互相连通\n\n\n\n#### name\n\n> 设置网络名称\n\n\n\n#### external\n\n> 设置为true表示不归compose管辖\n\n\n\n\n\n#### volumes\n\n> volumes是用于存储的持久化卷\n\n\n\n#### name\n\n> 指定volume的名称\n\n\n\n### configs\n\nThe top-level `configs` declaration defines or references configuration data that can be granted to the services in this application. The source of the config is either `file` or `external`.\n\n> `configs`声明声明该数据授权给service的，其来源要么是文件，要么是以及存在的config。\n\n- `file`:  文件路径\n- `external`: true表明config以及被创建了（可能类似于c语言的external关键字）\n- `name`: 配置名称。 \n\n\n\n\n\n### secrets\n\n> 同configs，只是说，configs挂载的文件权限是读写，secrets是只读。\n","source":"_posts/devops/docker-compose.md","raw":"---\ntitle: Docker Compose\ndate: 2023-02-06 11:00:58\ntags:\n- devops\n---\n\n\n\n# [Docker Compose](https://docs.docker.com/compose/) \n\n> Compose是一个用于管理多容器的工具，仅用一个yaml文件，一条指令即可创建，开启,停止所有的服务\n\n\n\n## [Docker Compose 文件语法](https://docs.docker.com/compose/compose-file/#compose-file)\n\n\n\n> Compose 文件是一个yaml格式的文件。文件内容包含version，services，networks,volumns,configs,secrets\n\n\n\n### yaml\n\n\n\n#### 多行缩进\n\n> 一种描述数据的标记语言，类似于xml,json等。\n\n数据结构可以用类似大纲的缩排方式呈现，结构通过缩进来表示，连续的项目通过减号“-”来表示，map结构里面的key/value对用冒号“:”来分隔。样例如下：\n\n```yaml\nhouse:\n  family:\n    name: Doe\n    parents:\n      - John\n      - Jane\n    children:\n      - Paul\n      - Mark\n      - Simone\n  address:\n    number: 34\n    street: Main Street\n    city: Nowheretown\n    zipcode: 12345\n```\n\n\n\n> 等同于如下Java语法描述的数据\n\n```java\nclass House {\n    Family f;\n    Address a;\n    public House(Family f,Address a) {\n        //...\n    }\n}\nclass Family {\n    String name;\n    List<String> parents;\n    List<String> children;\n    public Family(String name,List<String> parents,List<String> children){\n        //...\n    }\n}\nclass Address {\n    int number;\n    String street;\n    String city;\n    int zipcode;\n    public Address(int number,String street,String city,int zipcode) {\n        //...\n    }\n}\n```\n\n```java\nnew House(\n    new Family(\"Doe\",List.of(\"John\",\"Jane\"),List.of(\"Paul\",\"Mark\",\"Simone\")),\n    new Address(34,\"Main Street\",\"Nowheretown\",1234)\n)\n```\n\n\n\nNotes:\n\n1. 字串不一定要用双引号标识；\n2. 在缩排中空白字符的数目并不是非常重要，只要相同阶层的元素左侧**对齐**就可以了（**不过不能使用TAB字符**）\n3. 允许在文件中加入选择性的空行，以增加可读性；\n4. 在一个档案中，可同时包含多个文件，并用“——”分隔；\n5. 选择性的符号“...”可以用来表示档案结尾（在利用串流的通讯中，这非常有用，可以在不关闭串流的情况下，发送结束讯号）。\n\n\n\n#### 单行缩进\n\n> 描述的同一结构的不同写法,个人感觉简洁是简洁，但是可读性是真的不太邢。docker compose官网实例基本是采用的多行缩进。\n\n```yaml\nhouse:\n  family: { name: Doe, parents: [John, Jane], children: [Paul, Mark, Simone] }\n  address: { number: 34, street: Main Street, city: Nowheretown, zipcode: 12345 }\n```\n\n\n\n### versions\n\n```yaml\nversions: \n```\n\n确认compose的版本号(官方不推荐我们写,此处为了向后兼容)\n\n> A Compose implementation SHOULD NOT use this version to select an exact schema to validate the Compose file, but prefer the most recent schema at the time it has been designed.\n\n\n\n\n\n### services\n\n> A Service is an abstract definition of a computing resource within an application which can be scaled/replaced independently from other components. Services are backed by a set of containers, run by the platform according to replication requirements and placement constraints. Being backed by containers, Services are defined by a Docker image and set of runtime arguments. All containers within a service are identically created with these arguments.\n>\n> Service是执行资源的抽象定义，services的背后是container的集合，运行的container是其实就是由docker image和运行时环境变量组成的services定义的。\n\n\n\n#### build\n\n> container需要镜像才能创建，镜像可以是远端的，也可以是自己构建的，build参数可以用以声明自定义的镜像。\n\n\n\n#### [blkio_config](https://docs.docker.com/compose/compose-file/#blkio_config)\n\nblocking io configuration。用于配置io，使用或许较少。\n\n\n\n#### [configs](https://docs.docker.com/compose/compose-file/#configs)\n\n> `configs` grant access to configs on a per-service basis using the per-service `configs` configuration\n>\n> 表示允许访问指定的configs，每一个service都使用自己的configs，来区分不同的配置。\n>\n> 值得注意的是，使用configs之前得定义configs\n\n\n\n> configs有两中格式，shorts syntax，long syntax\n\n\n\n- short syntax\n\n> The short syntax variant only specifies the config name. This grants the container access to the config and mounts it at `/<config_name>` within the container. The source name and destination mount point are both set to the config name\n>\n> short syntax的写法只需要声明config的名称，之后该config文件就会被mount在container的**/<config_name>** 路径下。\n\n> 声明了两个configs：\n>\n> - my_config\n> - my_config\n>\n> 其中redis（service名称，随意定义）服务可以使用my_config\n\n\n\n```yaml\nservices:\n  redis:\n    image: redis:latest\n    configs:\n      - my_config\nconfigs:\n  my_config:\n    file: ./my_config.txt\n  my_other_config:\n    external: true\n\n```\n\n\n\n调用docker compose up以后，生成了如下的一个集群。这个集群里面包含一个redis container\n\n![image-20230206125858471](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206125858471.png)\n\n\n\n进入容器查看内容\n\n![image-20230206130317942](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206130317942.png)\n\n\n\n由于没有创建config文件，自动创建了一个文件夹。**是文件夹**！！\n\n![image-20230206130546271](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206130546271.png)\n\n\n\n而且还与本地路径的my_config做了挂载（docker compose up创建容器之后new的文件）\n\n![image-20230206130714732](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206130714732.png)\n\n容器内也有对应的文件\n\n![image-20230206130833120](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206130833120.png)\n\n\n\n在docker compose up之前创建了文件，会把这个文件映射到docker容器内。\n\n![image-20230206131035221](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206131035221.png)\n\n\n\n![image-20230206131219023](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206131219023.png)\n\n\n\n文件内容的修改也会同步到compose的文件中\n\n\n\n\n\n- #### Long syntax\n\n> short syntax 虽然简单，但是不能精确得控制配置文件的属性，细粒度不够。long syntax 通过如下属性控制配置文件\n>\n> - `source`: 选用哪个配置\n> - `target`: 文件挂载到container的哪个位置，如果不指定就默认挂载到/<source> \n> - `uid` and `gid`: config文件的所属uid和gid，用处不大。\n> - `mode`: unix文件权限号。\n\n\n\n选用my_config,挂载在/redis_config， owner uid 为103，gid为103，只有owner和group有读权限。\n\n```yaml\nservices:\n  redis:\n    image: redis:latest\n    configs:\n      - source: my_config\n        target: /redis_config\n        uid: \"103\"\n        gid: \"103\"\n        mode: 0440\nconfigs:\n  my_config:\n    external: true\n  my_other_config:\n    external: true\n\n```\n\n\n\n![image-20230206132933367](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206132933367.png)\n\n\n\n![image-20230206132911472](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206132911472.png)\n\n\n\n\n\n\n\n#### container_name\n\n> 用于指定container的名称\n\n\n\n#### depends_on\n\n> 指定容器的依赖关系，微服务开启和关闭。\n>\n> 开启服务和关闭服务采用拓扑排序。\n\n\n\n#### hostname\n\n> 定义一个自定义主机名\n\n\n\n```yaml\nservices:\n  nginx:\n    hostname: ng\n    image: nginx \n  test:\n    image: nginx\n```\n\n\n\n生成两个容器\n\n![image-20230206142204093](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206142204093.png)\n\n\n\n在test容器内使用hostname为一串杂凑值\n\n![image-20230206143720523](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206143720523.png)\n\n\n\nng容器的hostname为ng\n\n![image-20230206143841598](https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206143841598.png)\n\n\n\n#### links\n\n> 定义和其他service的网络连接，定义方式有两种：\n>\n> - <serviceName> \n> - <serviceName>:<alias>\n\n```yaml\nweb:\n  links:\n    - db\n    - db:database\n    - redis\n```\n\n\n\n#### networks\n\n> 定义service加入的网络，network的定义需要在顶层声明networks，然后进行配置。\n\n如下some-service，加入了some-network和other-network。\n\n```yaml\nservices:\n  some-service:\n    networks:\n      - some-network\n      - other-network\n```\n\n\n\n#### ports\n\n> 端口映射，将容器端口和宿主机端口进行绑定。\n\n语法格式分为两类\n\n- Short Syntax\n\n> 是一个以冒号分隔的字符串语法如下\n>\n> [host:]contianer[/protocol]\n>\n> - host  指 [ip:]\\(port | range)\n> - container 指 port | range\n> - protocol 指协议大多是tcp udp\n\n```yaml\nports:\n  - \"3000\"\n  - \"3000-3005\"\n  - \"8000:8000\"\n  - \"9090-9091:8080-8081\"\n  - \"49100:22\"\n  - \"127.0.0.1:8001:8001\"\n  - \"127.0.0.1:5000-5010:5000-5010\"\n  - \"6060:6060/udp\"\n\n```\n\n- Long Syntax\n\n> 相比于short syntax，有更加精细的粒度\n>\n> - `target`: 容器端口\n> - `published`: container暴露的duan'kduank偶.\n> - `host_ip`: 主机进行映射的接口，如果不设置默认为全部接口i(`0.0.0.0`)\n> - `protocol`: 端口采用xie'yxieyi  (`tcp` or `udp`), 不声明默认是所有协议\n> - `mode`: `host` 用于与宿主机做映射, or `ingress` 用于做负载均衡.\n\n\n\n#### restart\n\n> container终止后处理策略\n>\n> - `no`: 什么都不做 \t\n> - `always`:  如果container没有被移除尝试重启.\n> - `on-failure`: 如果是因为出错而终止，进行重启.\n> - `unless-stopped`: 如果container被stop了或者remove了不重启，此外进行重启。\n\n\n\n#### secrets\n\n> 准许service访问敏感文件，语法分为两类\n\n- #### Short syntax\n\n> 只需要声明secret的名称，container只有read权限，并且文件将被mount在contianer 的/run/secrets/<secret_name>路径下\n\n\n\n文件将被挂载在/run/secrets/server-certificate\n\n```yaml\nservices:\n  frontend:\n    image: awesome/webapp\n    secrets:\n      - server-certificate\nsecrets:\n  server-certificate:\n    file: ./server.cert\n\n```\n\n\n\n- #### Long syntax\n> \n  - `source`:  secrets项\n  - `target`:  挂载在`/run/secrets`路径的文件的名称\n  - `uid` and `gid`: secret 文件的owner和所属组id\n  - `mode`:  unix文件权限\n\n  ```yaml\n  services:\n    frontend:\n      image: awesome/webapp\n      secrets:\n        - source: server-certificate\n          target: server.cert\n          uid: \"103\"\n          gid: \"103\"\n          mode: 0440\n  secrets:\n    server-certificate:\n      external: true\n  ```\n\n\n\n\n\n#### volumes\n\n> 定义宿主机和container容器的映射关系。语法格式分为长短两种。\n>\n> 如果该数据卷只能由一个service使用，那么这个属性作为service的一部分，不需要额外声明顶层的volumes。\n\n- Short Syntax\n\n>  以分号为间隔，分为两种语法。\n>\n> - volume: container_path\n> - volume: container_path: access_mode\\\n>\n> volume: 宿主机的路径或者卷的名称\n>\n> container_path:  卷挂载在宿主机的路径\n>\n> access_mode: 以逗号分隔的选项，可以是rw，ro，z，Z，读写，只读，不同容器共享，不同容器不共享。\n\n- Long Syntax\n\n> - `type`: 挂载类型 `volume`, `bind`, `tmpfs` or `npipe`\n>\n> - `source`: 挂载源头, 要么是宿主机的路径, 或者是[`top-level `volumes` key](https://docs.docker.com/compose/compose-file/#volumes-top-level-element). Not applicable for a tmpfs mount.\n>\n> - `target`: 卷挂载在container的位置\n>\n> - `read_only`:  暗示卷制度\n>\n>   : configure additional bind options\n>\n>   - `propagation`: the propagation mode used for the bind\n>  - `create_host_path`: create a directory at the source path on host if there is nothing present. Do nothing if there is something present at the path. This is automatically implied by short syntax for backward compatibility with docker-compose legacy.\n>   - `selinux`: the SELinux re-labeling option `z` (shared) or `Z` (private)\n> \n> - `volume`: configure additional volume options\n>\n>   - `nocopy`: flag to disable copying of data from a container when a volume is created\n>\n> - `tmpfs`\n>\n>   : configure additional tmpfs options\n>\n>   - `size`: the size for the tmpfs mount in bytes (either numeric or as bytes unit)\n>  - `mode`: the filemode for the tmpfs mount as Unix permission bits as an octal number\n> \n>- `consistency`: the consistency requirements of the mount. Available values are platform specific\n\n\n\n#### working_dir \n\n> 覆写container中由image(Dockerfile workdir)指定的工作路径\n\n\n\n### networks\n\n> 用与不同容器间的互相连通\n\n\n\n#### name\n\n> 设置网络名称\n\n\n\n#### external\n\n> 设置为true表示不归compose管辖\n\n\n\n\n\n#### volumes\n\n> volumes是用于存储的持久化卷\n\n\n\n#### name\n\n> 指定volume的名称\n\n\n\n### configs\n\nThe top-level `configs` declaration defines or references configuration data that can be granted to the services in this application. The source of the config is either `file` or `external`.\n\n> `configs`声明声明该数据授权给service的，其来源要么是文件，要么是以及存在的config。\n\n- `file`:  文件路径\n- `external`: true表明config以及被创建了（可能类似于c语言的external关键字）\n- `name`: 配置名称。 \n\n\n\n\n\n### secrets\n\n> 同configs，只是说，configs挂载的文件权限是读写，secrets是只读。\n","slug":"devops/docker-compose","published":1,"updated":"2023-02-07T13:25:01.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clduaihbh0001bote7k7164n7","content":"<h1 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a><a href=\"https://docs.docker.com/compose/\">Docker Compose</a></h1><blockquote>\n<p>Compose是一个用于管理多容器的工具，仅用一个yaml文件，一条指令即可创建，开启,停止所有的服务</p>\n</blockquote>\n<h2 id=\"Docker-Compose-文件语法\"><a href=\"#Docker-Compose-文件语法\" class=\"headerlink\" title=\"Docker Compose 文件语法\"></a><a href=\"https://docs.docker.com/compose/compose-file/#compose-file\">Docker Compose 文件语法</a></h2><blockquote>\n<p>Compose 文件是一个yaml格式的文件。文件内容包含version，services，networks,volumns,configs,secrets</p>\n</blockquote>\n<h3 id=\"yaml\"><a href=\"#yaml\" class=\"headerlink\" title=\"yaml\"></a>yaml</h3><h4 id=\"多行缩进\"><a href=\"#多行缩进\" class=\"headerlink\" title=\"多行缩进\"></a>多行缩进</h4><blockquote>\n<p>一种描述数据的标记语言，类似于xml,json等。</p>\n</blockquote>\n<p>数据结构可以用类似大纲的缩排方式呈现，结构通过缩进来表示，连续的项目通过减号“-”来表示，map结构里面的key/value对用冒号“:”来分隔。样例如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">house:</span></span><br><span class=\"line\">  <span class=\"attr\">family:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">Doe</span></span><br><span class=\"line\">    <span class=\"attr\">parents:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">John</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">Jane</span></span><br><span class=\"line\">    <span class=\"attr\">children:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">Paul</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">Mark</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">Simone</span></span><br><span class=\"line\">  <span class=\"attr\">address:</span></span><br><span class=\"line\">    <span class=\"attr\">number:</span> <span class=\"number\">34</span></span><br><span class=\"line\">    <span class=\"attr\">street:</span> <span class=\"string\">Main</span> <span class=\"string\">Street</span></span><br><span class=\"line\">    <span class=\"attr\">city:</span> <span class=\"string\">Nowheretown</span></span><br><span class=\"line\">    <span class=\"attr\">zipcode:</span> <span class=\"number\">12345</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>等同于如下Java语法描述的数据</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">House</span> &#123;</span><br><span class=\"line\">    Family f;</span><br><span class=\"line\">    Address a;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">House</span><span class=\"params\">(Family f,Address a)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Family</span> &#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    List&lt;String&gt; parents;</span><br><span class=\"line\">    List&lt;String&gt; children;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Family</span><span class=\"params\">(String name,List&lt;String&gt; parents,List&lt;String&gt; children)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Address</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> number;</span><br><span class=\"line\">    String street;</span><br><span class=\"line\">    String city;</span><br><span class=\"line\">    <span class=\"type\">int</span> zipcode;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Address</span><span class=\"params\">(<span class=\"type\">int</span> number,String street,String city,<span class=\"type\">int</span> zipcode)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">House</span>(</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Family</span>(<span class=\"string\">&quot;Doe&quot;</span>,List.of(<span class=\"string\">&quot;John&quot;</span>,<span class=\"string\">&quot;Jane&quot;</span>),List.of(<span class=\"string\">&quot;Paul&quot;</span>,<span class=\"string\">&quot;Mark&quot;</span>,<span class=\"string\">&quot;Simone&quot;</span>)),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Address</span>(<span class=\"number\">34</span>,<span class=\"string\">&quot;Main Street&quot;</span>,<span class=\"string\">&quot;Nowheretown&quot;</span>,<span class=\"number\">1234</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>Notes:</p>\n<ol>\n<li>字串不一定要用双引号标识；</li>\n<li>在缩排中空白字符的数目并不是非常重要，只要相同阶层的元素左侧<strong>对齐</strong>就可以了（<strong>不过不能使用TAB字符</strong>）</li>\n<li>允许在文件中加入选择性的空行，以增加可读性；</li>\n<li>在一个档案中，可同时包含多个文件，并用“——”分隔；</li>\n<li>选择性的符号“…”可以用来表示档案结尾（在利用串流的通讯中，这非常有用，可以在不关闭串流的情况下，发送结束讯号）。</li>\n</ol>\n<h4 id=\"单行缩进\"><a href=\"#单行缩进\" class=\"headerlink\" title=\"单行缩进\"></a>单行缩进</h4><blockquote>\n<p>描述的同一结构的不同写法,个人感觉简洁是简洁，但是可读性是真的不太邢。docker compose官网实例基本是采用的多行缩进。</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">house:</span></span><br><span class=\"line\">  <span class=\"attr\">family:</span> &#123; <span class=\"attr\">name:</span> <span class=\"string\">Doe</span>, <span class=\"attr\">parents:</span> [<span class=\"string\">John</span>, <span class=\"string\">Jane</span>], <span class=\"attr\">children:</span> [<span class=\"string\">Paul</span>, <span class=\"string\">Mark</span>, <span class=\"string\">Simone</span>] &#125;</span><br><span class=\"line\">  <span class=\"attr\">address:</span> &#123; <span class=\"attr\">number:</span> <span class=\"number\">34</span>, <span class=\"attr\">street:</span> <span class=\"string\">Main</span> <span class=\"string\">Street</span>, <span class=\"attr\">city:</span> <span class=\"string\">Nowheretown</span>, <span class=\"attr\">zipcode:</span> <span class=\"number\">12345</span> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"versions\"><a href=\"#versions\" class=\"headerlink\" title=\"versions\"></a>versions</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">versions:</span> </span><br></pre></td></tr></table></figure>\n\n<p>确认compose的版本号(官方不推荐我们写,此处为了向后兼容)</p>\n<blockquote>\n<p>A Compose implementation SHOULD NOT use this version to select an exact schema to validate the Compose file, but prefer the most recent schema at the time it has been designed.</p>\n</blockquote>\n<h3 id=\"services\"><a href=\"#services\" class=\"headerlink\" title=\"services\"></a>services</h3><blockquote>\n<p>A Service is an abstract definition of a computing resource within an application which can be scaled/replaced independently from other components. Services are backed by a set of containers, run by the platform according to replication requirements and placement constraints. Being backed by containers, Services are defined by a Docker image and set of runtime arguments. All containers within a service are identically created with these arguments.</p>\n<p>Service是执行资源的抽象定义，services的背后是container的集合，运行的container是其实就是由docker image和运行时环境变量组成的services定义的。</p>\n</blockquote>\n<h4 id=\"build\"><a href=\"#build\" class=\"headerlink\" title=\"build\"></a>build</h4><blockquote>\n<p>container需要镜像才能创建，镜像可以是远端的，也可以是自己构建的，build参数可以用以声明自定义的镜像。</p>\n</blockquote>\n<h4 id=\"blkio-config\"><a href=\"#blkio-config\" class=\"headerlink\" title=\"blkio_config\"></a><a href=\"https://docs.docker.com/compose/compose-file/#blkio_config\">blkio_config</a></h4><p>blocking io configuration。用于配置io，使用或许较少。</p>\n<h4 id=\"configs\"><a href=\"#configs\" class=\"headerlink\" title=\"configs\"></a><a href=\"https://docs.docker.com/compose/compose-file/#configs\">configs</a></h4><blockquote>\n<p><code>configs</code> grant access to configs on a per-service basis using the per-service <code>configs</code> configuration</p>\n<p>表示允许访问指定的configs，每一个service都使用自己的configs，来区分不同的配置。</p>\n<p>值得注意的是，使用configs之前得定义configs</p>\n</blockquote>\n<blockquote>\n<p>configs有两中格式，shorts syntax，long syntax</p>\n</blockquote>\n<ul>\n<li>short syntax</li>\n</ul>\n<blockquote>\n<p>The short syntax variant only specifies the config name. This grants the container access to the config and mounts it at <code>/&lt;config_name&gt;</code> within the container. The source name and destination mount point are both set to the config name</p>\n<p>short syntax的写法只需要声明config的名称，之后该config文件就会被mount在container的**/<config_name>** 路径下。</p>\n</blockquote>\n<blockquote>\n<p>声明了两个configs：</p>\n<ul>\n<li>my_config</li>\n<li>my_config</li>\n</ul>\n<p>其中redis（service名称，随意定义）服务可以使用my_config</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">redis:latest</span></span><br><span class=\"line\">    <span class=\"attr\">configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">my_config</span></span><br><span class=\"line\"><span class=\"attr\">configs:</span></span><br><span class=\"line\">  <span class=\"attr\">my_config:</span></span><br><span class=\"line\">    <span class=\"attr\">file:</span> <span class=\"string\">./my_config.txt</span></span><br><span class=\"line\">  <span class=\"attr\">my_other_config:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>调用docker compose up以后，生成了如下的一个集群。这个集群里面包含一个redis container</p>\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206125858471.png\" alt=\"image-20230206125858471\"></p>\n<p>进入容器查看内容</p>\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206130317942.png\" alt=\"image-20230206130317942\"></p>\n<p>由于没有创建config文件，自动创建了一个文件夹。<strong>是文件夹</strong>！！</p>\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206130546271.png\" alt=\"image-20230206130546271\"></p>\n<p>而且还与本地路径的my_config做了挂载（docker compose up创建容器之后new的文件）</p>\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206130714732.png\" alt=\"image-20230206130714732\"></p>\n<p>容器内也有对应的文件</p>\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206130833120.png\" alt=\"image-20230206130833120\"></p>\n<p>在docker compose up之前创建了文件，会把这个文件映射到docker容器内。</p>\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206131035221.png\" alt=\"image-20230206131035221\"></p>\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206131219023.png\" alt=\"image-20230206131219023\"></p>\n<p>文件内容的修改也会同步到compose的文件中</p>\n<ul>\n<li><h4 id=\"Long-syntax\"><a href=\"#Long-syntax\" class=\"headerlink\" title=\"Long syntax\"></a>Long syntax</h4></li>\n</ul>\n<blockquote>\n<p>short syntax 虽然简单，但是不能精确得控制配置文件的属性，细粒度不够。long syntax 通过如下属性控制配置文件</p>\n<ul>\n<li><code>source</code>: 选用哪个配置</li>\n<li><code>target</code>: 文件挂载到container的哪个位置，如果不指定就默认挂载到/<source> </li>\n<li><code>uid</code> and <code>gid</code>: config文件的所属uid和gid，用处不大。</li>\n<li><code>mode</code>: unix文件权限号。</li>\n</ul>\n</blockquote>\n<p>选用my_config,挂载在/redis_config， owner uid 为103，gid为103，只有owner和group有读权限。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">redis:latest</span></span><br><span class=\"line\">    <span class=\"attr\">configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source:</span> <span class=\"string\">my_config</span></span><br><span class=\"line\">        <span class=\"attr\">target:</span> <span class=\"string\">/redis_config</span></span><br><span class=\"line\">        <span class=\"attr\">uid:</span> <span class=\"string\">&quot;103&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">gid:</span> <span class=\"string\">&quot;103&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">mode:</span> <span class=\"number\">0440</span></span><br><span class=\"line\"><span class=\"attr\">configs:</span></span><br><span class=\"line\">  <span class=\"attr\">my_config:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">my_other_config:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206132933367.png\" alt=\"image-20230206132933367\"></p>\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206132911472.png\" alt=\"image-20230206132911472\"></p>\n<h4 id=\"container-name\"><a href=\"#container-name\" class=\"headerlink\" title=\"container_name\"></a>container_name</h4><blockquote>\n<p>用于指定container的名称</p>\n</blockquote>\n<h4 id=\"depends-on\"><a href=\"#depends-on\" class=\"headerlink\" title=\"depends_on\"></a>depends_on</h4><blockquote>\n<p>指定容器的依赖关系，微服务开启和关闭。</p>\n<p>开启服务和关闭服务采用拓扑排序。</p>\n</blockquote>\n<h4 id=\"hostname\"><a href=\"#hostname\" class=\"headerlink\" title=\"hostname\"></a>hostname</h4><blockquote>\n<p>定义一个自定义主机名</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">nginx:</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">ng</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx</span> </span><br><span class=\"line\">  <span class=\"attr\">test:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>生成两个容器</p>\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206142204093.png\" alt=\"image-20230206142204093\"></p>\n<p>在test容器内使用hostname为一串杂凑值</p>\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206143720523.png\" alt=\"image-20230206143720523\"></p>\n<p>ng容器的hostname为ng</p>\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206143841598.png\" alt=\"image-20230206143841598\"></p>\n<h4 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h4><blockquote>\n<p>定义和其他service的网络连接，定义方式有两种：</p>\n<ul>\n<li><serviceName> </li>\n<li><serviceName>:<alias></li>\n</ul>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">web:</span></span><br><span class=\"line\">  <span class=\"attr\">links:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">db</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">db:database</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">redis</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"networks\"><a href=\"#networks\" class=\"headerlink\" title=\"networks\"></a>networks</h4><blockquote>\n<p>定义service加入的网络，network的定义需要在顶层声明networks，然后进行配置。</p>\n</blockquote>\n<p>如下some-service，加入了some-network和other-network。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">some-service:</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">some-network</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">other-network</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"ports\"><a href=\"#ports\" class=\"headerlink\" title=\"ports\"></a>ports</h4><blockquote>\n<p>端口映射，将容器端口和宿主机端口进行绑定。</p>\n</blockquote>\n<p>语法格式分为两类</p>\n<ul>\n<li>Short Syntax</li>\n</ul>\n<blockquote>\n<p>是一个以冒号分隔的字符串语法如下</p>\n<p>[host:]contianer[/protocol]</p>\n<ul>\n<li>host  指 [ip:](port | range)</li>\n<li>container 指 port | range</li>\n<li>protocol 指协议大多是tcp udp</li>\n</ul>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;3000&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;3000-3005&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;8000:8000&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;9090-9091:8080-8081&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;49100:22&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;127.0.0.1:8001:8001&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;127.0.0.1:5000-5010:5000-5010&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;6060:6060/udp&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Long Syntax</li>\n</ul>\n<blockquote>\n<p>相比于short syntax，有更加精细的粒度</p>\n<ul>\n<li><code>target</code>: 容器端口</li>\n<li><code>published</code>: container暴露的duan’kduank偶.</li>\n<li><code>host_ip</code>: 主机进行映射的接口，如果不设置默认为全部接口i(<code>0.0.0.0</code>)</li>\n<li><code>protocol</code>: 端口采用xie’yxieyi  (<code>tcp</code> or <code>udp</code>), 不声明默认是所有协议</li>\n<li><code>mode</code>: <code>host</code> 用于与宿主机做映射, or <code>ingress</code> 用于做负载均衡.</li>\n</ul>\n</blockquote>\n<h4 id=\"restart\"><a href=\"#restart\" class=\"headerlink\" title=\"restart\"></a>restart</h4><blockquote>\n<p>container终止后处理策略</p>\n<ul>\n<li><code>no</code>: 什么都不做     </li>\n<li><code>always</code>:  如果container没有被移除尝试重启.</li>\n<li><code>on-failure</code>: 如果是因为出错而终止，进行重启.</li>\n<li><code>unless-stopped</code>: 如果container被stop了或者remove了不重启，此外进行重启。</li>\n</ul>\n</blockquote>\n<h4 id=\"secrets\"><a href=\"#secrets\" class=\"headerlink\" title=\"secrets\"></a>secrets</h4><blockquote>\n<p>准许service访问敏感文件，语法分为两类</p>\n</blockquote>\n<ul>\n<li><h4 id=\"Short-syntax\"><a href=\"#Short-syntax\" class=\"headerlink\" title=\"Short syntax\"></a>Short syntax</h4></li>\n</ul>\n<blockquote>\n<p>只需要声明secret的名称，container只有read权限，并且文件将被mount在contianer 的/run/secrets/<secret_name>路径下</p>\n</blockquote>\n<p>文件将被挂载在/run/secrets/server-certificate</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">frontend:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">awesome/webapp</span></span><br><span class=\"line\">    <span class=\"attr\">secrets:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">server-certificate</span></span><br><span class=\"line\"><span class=\"attr\">secrets:</span></span><br><span class=\"line\">  <span class=\"attr\">server-certificate:</span></span><br><span class=\"line\">    <span class=\"attr\">file:</span> <span class=\"string\">./server.cert</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><h4 id=\"Long-syntax-1\"><a href=\"#Long-syntax-1\" class=\"headerlink\" title=\"Long syntax\"></a>Long syntax</h4><blockquote>\n</blockquote>\n<ul>\n<li><code>source</code>:  secrets项</li>\n<li><code>target</code>:  挂载在<code>/run/secrets</code>路径的文件的名称</li>\n<li><code>uid</code> and <code>gid</code>: secret 文件的owner和所属组id</li>\n<li><code>mode</code>:  unix文件权限</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">frontend:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">awesome/webapp</span></span><br><span class=\"line\">    <span class=\"attr\">secrets:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source:</span> <span class=\"string\">server-certificate</span></span><br><span class=\"line\">        <span class=\"attr\">target:</span> <span class=\"string\">server.cert</span></span><br><span class=\"line\">        <span class=\"attr\">uid:</span> <span class=\"string\">&quot;103&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">gid:</span> <span class=\"string\">&quot;103&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">mode:</span> <span class=\"number\">0440</span></span><br><span class=\"line\"><span class=\"attr\">secrets:</span></span><br><span class=\"line\">  <span class=\"attr\">server-certificate:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"volumes\"><a href=\"#volumes\" class=\"headerlink\" title=\"volumes\"></a>volumes</h4><blockquote>\n<p>定义宿主机和container容器的映射关系。语法格式分为长短两种。</p>\n<p>如果该数据卷只能由一个service使用，那么这个属性作为service的一部分，不需要额外声明顶层的volumes。</p>\n</blockquote>\n<ul>\n<li>Short Syntax</li>\n</ul>\n<blockquote>\n<p> 以分号为间隔，分为两种语法。</p>\n<ul>\n<li>volume: container_path</li>\n<li>volume: container_path: access_mode\\</li>\n</ul>\n<p>volume: 宿主机的路径或者卷的名称</p>\n<p>container_path:  卷挂载在宿主机的路径</p>\n<p>access_mode: 以逗号分隔的选项，可以是rw，ro，z，Z，读写，只读，不同容器共享，不同容器不共享。</p>\n</blockquote>\n<ul>\n<li>Long Syntax</li>\n</ul>\n<blockquote>\n<ul>\n<li><p><code>type</code>: 挂载类型 <code>volume</code>, <code>bind</code>, <code>tmpfs</code> or <code>npipe</code></p>\n</li>\n<li><p><code>source</code>: 挂载源头, 要么是宿主机的路径, 或者是[<code>top-level </code>volumes` key](<a href=\"https://docs.docker.com/compose/compose-file/#volumes-top-level-element\">https://docs.docker.com/compose/compose-file/#volumes-top-level-element</a>). Not applicable for a tmpfs mount.</p>\n</li>\n<li><p><code>target</code>: 卷挂载在container的位置</p>\n</li>\n<li><p><code>read_only</code>:  暗示卷制度</p>\n<p>: configure additional bind options</p>\n<ul>\n<li><code>propagation</code>: the propagation mode used for the bind</li>\n</ul>\n</li>\n<li><p><code>create_host_path</code>: create a directory at the source path on host if there is nothing present. Do nothing if there is something present at the path. This is automatically implied by short syntax for backward compatibility with docker-compose legacy.</p>\n</li>\n<li><p><code>selinux</code>: the SELinux re-labeling option <code>z</code> (shared) or <code>Z</code> (private)</p>\n</li>\n<li><p><code>volume</code>: configure additional volume options</p>\n<ul>\n<li><code>nocopy</code>: flag to disable copying of data from a container when a volume is created</li>\n</ul>\n</li>\n<li><p><code>tmpfs</code></p>\n<p>: configure additional tmpfs options</p>\n<ul>\n<li><code>size</code>: the size for the tmpfs mount in bytes (either numeric or as bytes unit)</li>\n</ul>\n</li>\n<li><p><code>mode</code>: the filemode for the tmpfs mount as Unix permission bits as an octal number</p>\n</li>\n<li><p><code>consistency</code>: the consistency requirements of the mount. Available values are platform specific</p>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"working-dir\"><a href=\"#working-dir\" class=\"headerlink\" title=\"working_dir\"></a>working_dir</h4><blockquote>\n<p>覆写container中由image(Dockerfile workdir)指定的工作路径</p>\n</blockquote>\n<h3 id=\"networks-1\"><a href=\"#networks-1\" class=\"headerlink\" title=\"networks\"></a>networks</h3><blockquote>\n<p>用与不同容器间的互相连通</p>\n</blockquote>\n<h4 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h4><blockquote>\n<p>设置网络名称</p>\n</blockquote>\n<h4 id=\"external\"><a href=\"#external\" class=\"headerlink\" title=\"external\"></a>external</h4><blockquote>\n<p>设置为true表示不归compose管辖</p>\n</blockquote>\n<h4 id=\"volumes-1\"><a href=\"#volumes-1\" class=\"headerlink\" title=\"volumes\"></a>volumes</h4><blockquote>\n<p>volumes是用于存储的持久化卷</p>\n</blockquote>\n<h4 id=\"name-1\"><a href=\"#name-1\" class=\"headerlink\" title=\"name\"></a>name</h4><blockquote>\n<p>指定volume的名称</p>\n</blockquote>\n<h3 id=\"configs-1\"><a href=\"#configs-1\" class=\"headerlink\" title=\"configs\"></a>configs</h3><p>The top-level <code>configs</code> declaration defines or references configuration data that can be granted to the services in this application. The source of the config is either <code>file</code> or <code>external</code>.</p>\n<blockquote>\n<p><code>configs</code>声明声明该数据授权给service的，其来源要么是文件，要么是以及存在的config。</p>\n</blockquote>\n<ul>\n<li><code>file</code>:  文件路径</li>\n<li><code>external</code>: true表明config以及被创建了（可能类似于c语言的external关键字）</li>\n<li><code>name</code>: 配置名称。 </li>\n</ul>\n<h3 id=\"secrets-1\"><a href=\"#secrets-1\" class=\"headerlink\" title=\"secrets\"></a>secrets</h3><blockquote>\n<p>同configs，只是说，configs挂载的文件权限是读写，secrets是只读。</p>\n</blockquote>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a><a href=\"https://docs.docker.com/compose/\">Docker Compose</a></h1><blockquote>\n<p>Compose是一个用于管理多容器的工具，仅用一个yaml文件，一条指令即可创建，开启,停止所有的服务</p>\n</blockquote>\n<h2 id=\"Docker-Compose-文件语法\"><a href=\"#Docker-Compose-文件语法\" class=\"headerlink\" title=\"Docker Compose 文件语法\"></a><a href=\"https://docs.docker.com/compose/compose-file/#compose-file\">Docker Compose 文件语法</a></h2><blockquote>\n<p>Compose 文件是一个yaml格式的文件。文件内容包含version，services，networks,volumns,configs,secrets</p>\n</blockquote>\n<h3 id=\"yaml\"><a href=\"#yaml\" class=\"headerlink\" title=\"yaml\"></a>yaml</h3><h4 id=\"多行缩进\"><a href=\"#多行缩进\" class=\"headerlink\" title=\"多行缩进\"></a>多行缩进</h4><blockquote>\n<p>一种描述数据的标记语言，类似于xml,json等。</p>\n</blockquote>\n<p>数据结构可以用类似大纲的缩排方式呈现，结构通过缩进来表示，连续的项目通过减号“-”来表示，map结构里面的key/value对用冒号“:”来分隔。样例如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">house:</span></span><br><span class=\"line\">  <span class=\"attr\">family:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">Doe</span></span><br><span class=\"line\">    <span class=\"attr\">parents:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">John</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">Jane</span></span><br><span class=\"line\">    <span class=\"attr\">children:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">Paul</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">Mark</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">Simone</span></span><br><span class=\"line\">  <span class=\"attr\">address:</span></span><br><span class=\"line\">    <span class=\"attr\">number:</span> <span class=\"number\">34</span></span><br><span class=\"line\">    <span class=\"attr\">street:</span> <span class=\"string\">Main</span> <span class=\"string\">Street</span></span><br><span class=\"line\">    <span class=\"attr\">city:</span> <span class=\"string\">Nowheretown</span></span><br><span class=\"line\">    <span class=\"attr\">zipcode:</span> <span class=\"number\">12345</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>等同于如下Java语法描述的数据</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">House</span> &#123;</span><br><span class=\"line\">    Family f;</span><br><span class=\"line\">    Address a;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">House</span><span class=\"params\">(Family f,Address a)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Family</span> &#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    List&lt;String&gt; parents;</span><br><span class=\"line\">    List&lt;String&gt; children;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Family</span><span class=\"params\">(String name,List&lt;String&gt; parents,List&lt;String&gt; children)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Address</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> number;</span><br><span class=\"line\">    String street;</span><br><span class=\"line\">    String city;</span><br><span class=\"line\">    <span class=\"type\">int</span> zipcode;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Address</span><span class=\"params\">(<span class=\"type\">int</span> number,String street,String city,<span class=\"type\">int</span> zipcode)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">House</span>(</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Family</span>(<span class=\"string\">&quot;Doe&quot;</span>,List.of(<span class=\"string\">&quot;John&quot;</span>,<span class=\"string\">&quot;Jane&quot;</span>),List.of(<span class=\"string\">&quot;Paul&quot;</span>,<span class=\"string\">&quot;Mark&quot;</span>,<span class=\"string\">&quot;Simone&quot;</span>)),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Address</span>(<span class=\"number\">34</span>,<span class=\"string\">&quot;Main Street&quot;</span>,<span class=\"string\">&quot;Nowheretown&quot;</span>,<span class=\"number\">1234</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>Notes:</p>\n<ol>\n<li>字串不一定要用双引号标识；</li>\n<li>在缩排中空白字符的数目并不是非常重要，只要相同阶层的元素左侧<strong>对齐</strong>就可以了（<strong>不过不能使用TAB字符</strong>）</li>\n<li>允许在文件中加入选择性的空行，以增加可读性；</li>\n<li>在一个档案中，可同时包含多个文件，并用“——”分隔；</li>\n<li>选择性的符号“…”可以用来表示档案结尾（在利用串流的通讯中，这非常有用，可以在不关闭串流的情况下，发送结束讯号）。</li>\n</ol>\n<h4 id=\"单行缩进\"><a href=\"#单行缩进\" class=\"headerlink\" title=\"单行缩进\"></a>单行缩进</h4><blockquote>\n<p>描述的同一结构的不同写法,个人感觉简洁是简洁，但是可读性是真的不太邢。docker compose官网实例基本是采用的多行缩进。</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">house:</span></span><br><span class=\"line\">  <span class=\"attr\">family:</span> &#123; <span class=\"attr\">name:</span> <span class=\"string\">Doe</span>, <span class=\"attr\">parents:</span> [<span class=\"string\">John</span>, <span class=\"string\">Jane</span>], <span class=\"attr\">children:</span> [<span class=\"string\">Paul</span>, <span class=\"string\">Mark</span>, <span class=\"string\">Simone</span>] &#125;</span><br><span class=\"line\">  <span class=\"attr\">address:</span> &#123; <span class=\"attr\">number:</span> <span class=\"number\">34</span>, <span class=\"attr\">street:</span> <span class=\"string\">Main</span> <span class=\"string\">Street</span>, <span class=\"attr\">city:</span> <span class=\"string\">Nowheretown</span>, <span class=\"attr\">zipcode:</span> <span class=\"number\">12345</span> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"versions\"><a href=\"#versions\" class=\"headerlink\" title=\"versions\"></a>versions</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">versions:</span> </span><br></pre></td></tr></table></figure>\n\n<p>确认compose的版本号(官方不推荐我们写,此处为了向后兼容)</p>\n<blockquote>\n<p>A Compose implementation SHOULD NOT use this version to select an exact schema to validate the Compose file, but prefer the most recent schema at the time it has been designed.</p>\n</blockquote>\n<h3 id=\"services\"><a href=\"#services\" class=\"headerlink\" title=\"services\"></a>services</h3><blockquote>\n<p>A Service is an abstract definition of a computing resource within an application which can be scaled/replaced independently from other components. Services are backed by a set of containers, run by the platform according to replication requirements and placement constraints. Being backed by containers, Services are defined by a Docker image and set of runtime arguments. All containers within a service are identically created with these arguments.</p>\n<p>Service是执行资源的抽象定义，services的背后是container的集合，运行的container是其实就是由docker image和运行时环境变量组成的services定义的。</p>\n</blockquote>\n<h4 id=\"build\"><a href=\"#build\" class=\"headerlink\" title=\"build\"></a>build</h4><blockquote>\n<p>container需要镜像才能创建，镜像可以是远端的，也可以是自己构建的，build参数可以用以声明自定义的镜像。</p>\n</blockquote>\n<h4 id=\"blkio-config\"><a href=\"#blkio-config\" class=\"headerlink\" title=\"blkio_config\"></a><a href=\"https://docs.docker.com/compose/compose-file/#blkio_config\">blkio_config</a></h4><p>blocking io configuration。用于配置io，使用或许较少。</p>\n<h4 id=\"configs\"><a href=\"#configs\" class=\"headerlink\" title=\"configs\"></a><a href=\"https://docs.docker.com/compose/compose-file/#configs\">configs</a></h4><blockquote>\n<p><code>configs</code> grant access to configs on a per-service basis using the per-service <code>configs</code> configuration</p>\n<p>表示允许访问指定的configs，每一个service都使用自己的configs，来区分不同的配置。</p>\n<p>值得注意的是，使用configs之前得定义configs</p>\n</blockquote>\n<blockquote>\n<p>configs有两中格式，shorts syntax，long syntax</p>\n</blockquote>\n<ul>\n<li>short syntax</li>\n</ul>\n<blockquote>\n<p>The short syntax variant only specifies the config name. This grants the container access to the config and mounts it at <code>/&lt;config_name&gt;</code> within the container. The source name and destination mount point are both set to the config name</p>\n<p>short syntax的写法只需要声明config的名称，之后该config文件就会被mount在container的**/<config_name>** 路径下。</p>\n</blockquote>\n<blockquote>\n<p>声明了两个configs：</p>\n<ul>\n<li>my_config</li>\n<li>my_config</li>\n</ul>\n<p>其中redis（service名称，随意定义）服务可以使用my_config</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">redis:latest</span></span><br><span class=\"line\">    <span class=\"attr\">configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">my_config</span></span><br><span class=\"line\"><span class=\"attr\">configs:</span></span><br><span class=\"line\">  <span class=\"attr\">my_config:</span></span><br><span class=\"line\">    <span class=\"attr\">file:</span> <span class=\"string\">./my_config.txt</span></span><br><span class=\"line\">  <span class=\"attr\">my_other_config:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>调用docker compose up以后，生成了如下的一个集群。这个集群里面包含一个redis container</p>\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206125858471.png\" alt=\"image-20230206125858471\"></p>\n<p>进入容器查看内容</p>\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206130317942.png\" alt=\"image-20230206130317942\"></p>\n<p>由于没有创建config文件，自动创建了一个文件夹。<strong>是文件夹</strong>！！</p>\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206130546271.png\" alt=\"image-20230206130546271\"></p>\n<p>而且还与本地路径的my_config做了挂载（docker compose up创建容器之后new的文件）</p>\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206130714732.png\" alt=\"image-20230206130714732\"></p>\n<p>容器内也有对应的文件</p>\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206130833120.png\" alt=\"image-20230206130833120\"></p>\n<p>在docker compose up之前创建了文件，会把这个文件映射到docker容器内。</p>\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206131035221.png\" alt=\"image-20230206131035221\"></p>\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206131219023.png\" alt=\"image-20230206131219023\"></p>\n<p>文件内容的修改也会同步到compose的文件中</p>\n<ul>\n<li><h4 id=\"Long-syntax\"><a href=\"#Long-syntax\" class=\"headerlink\" title=\"Long syntax\"></a>Long syntax</h4></li>\n</ul>\n<blockquote>\n<p>short syntax 虽然简单，但是不能精确得控制配置文件的属性，细粒度不够。long syntax 通过如下属性控制配置文件</p>\n<ul>\n<li><code>source</code>: 选用哪个配置</li>\n<li><code>target</code>: 文件挂载到container的哪个位置，如果不指定就默认挂载到/<source> </li>\n<li><code>uid</code> and <code>gid</code>: config文件的所属uid和gid，用处不大。</li>\n<li><code>mode</code>: unix文件权限号。</li>\n</ul>\n</blockquote>\n<p>选用my_config,挂载在/redis_config， owner uid 为103，gid为103，只有owner和group有读权限。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">redis:latest</span></span><br><span class=\"line\">    <span class=\"attr\">configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source:</span> <span class=\"string\">my_config</span></span><br><span class=\"line\">        <span class=\"attr\">target:</span> <span class=\"string\">/redis_config</span></span><br><span class=\"line\">        <span class=\"attr\">uid:</span> <span class=\"string\">&quot;103&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">gid:</span> <span class=\"string\">&quot;103&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">mode:</span> <span class=\"number\">0440</span></span><br><span class=\"line\"><span class=\"attr\">configs:</span></span><br><span class=\"line\">  <span class=\"attr\">my_config:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">my_other_config:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206132933367.png\" alt=\"image-20230206132933367\"></p>\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206132911472.png\" alt=\"image-20230206132911472\"></p>\n<h4 id=\"container-name\"><a href=\"#container-name\" class=\"headerlink\" title=\"container_name\"></a>container_name</h4><blockquote>\n<p>用于指定container的名称</p>\n</blockquote>\n<h4 id=\"depends-on\"><a href=\"#depends-on\" class=\"headerlink\" title=\"depends_on\"></a>depends_on</h4><blockquote>\n<p>指定容器的依赖关系，微服务开启和关闭。</p>\n<p>开启服务和关闭服务采用拓扑排序。</p>\n</blockquote>\n<h4 id=\"hostname\"><a href=\"#hostname\" class=\"headerlink\" title=\"hostname\"></a>hostname</h4><blockquote>\n<p>定义一个自定义主机名</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">nginx:</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">ng</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx</span> </span><br><span class=\"line\">  <span class=\"attr\">test:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>生成两个容器</p>\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206142204093.png\" alt=\"image-20230206142204093\"></p>\n<p>在test容器内使用hostname为一串杂凑值</p>\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206143720523.png\" alt=\"image-20230206143720523\"></p>\n<p>ng容器的hostname为ng</p>\n<p><img src=\"https://typora-blog-picture.oss-cn-chengdu.aliyuncs.com/blog/image-20230206143841598.png\" alt=\"image-20230206143841598\"></p>\n<h4 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h4><blockquote>\n<p>定义和其他service的网络连接，定义方式有两种：</p>\n<ul>\n<li><serviceName> </li>\n<li><serviceName>:<alias></li>\n</ul>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">web:</span></span><br><span class=\"line\">  <span class=\"attr\">links:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">db</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">db:database</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">redis</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"networks\"><a href=\"#networks\" class=\"headerlink\" title=\"networks\"></a>networks</h4><blockquote>\n<p>定义service加入的网络，network的定义需要在顶层声明networks，然后进行配置。</p>\n</blockquote>\n<p>如下some-service，加入了some-network和other-network。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">some-service:</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">some-network</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">other-network</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"ports\"><a href=\"#ports\" class=\"headerlink\" title=\"ports\"></a>ports</h4><blockquote>\n<p>端口映射，将容器端口和宿主机端口进行绑定。</p>\n</blockquote>\n<p>语法格式分为两类</p>\n<ul>\n<li>Short Syntax</li>\n</ul>\n<blockquote>\n<p>是一个以冒号分隔的字符串语法如下</p>\n<p>[host:]contianer[/protocol]</p>\n<ul>\n<li>host  指 [ip:](port | range)</li>\n<li>container 指 port | range</li>\n<li>protocol 指协议大多是tcp udp</li>\n</ul>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;3000&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;3000-3005&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;8000:8000&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;9090-9091:8080-8081&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;49100:22&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;127.0.0.1:8001:8001&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;127.0.0.1:5000-5010:5000-5010&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;6060:6060/udp&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Long Syntax</li>\n</ul>\n<blockquote>\n<p>相比于short syntax，有更加精细的粒度</p>\n<ul>\n<li><code>target</code>: 容器端口</li>\n<li><code>published</code>: container暴露的duan’kduank偶.</li>\n<li><code>host_ip</code>: 主机进行映射的接口，如果不设置默认为全部接口i(<code>0.0.0.0</code>)</li>\n<li><code>protocol</code>: 端口采用xie’yxieyi  (<code>tcp</code> or <code>udp</code>), 不声明默认是所有协议</li>\n<li><code>mode</code>: <code>host</code> 用于与宿主机做映射, or <code>ingress</code> 用于做负载均衡.</li>\n</ul>\n</blockquote>\n<h4 id=\"restart\"><a href=\"#restart\" class=\"headerlink\" title=\"restart\"></a>restart</h4><blockquote>\n<p>container终止后处理策略</p>\n<ul>\n<li><code>no</code>: 什么都不做     </li>\n<li><code>always</code>:  如果container没有被移除尝试重启.</li>\n<li><code>on-failure</code>: 如果是因为出错而终止，进行重启.</li>\n<li><code>unless-stopped</code>: 如果container被stop了或者remove了不重启，此外进行重启。</li>\n</ul>\n</blockquote>\n<h4 id=\"secrets\"><a href=\"#secrets\" class=\"headerlink\" title=\"secrets\"></a>secrets</h4><blockquote>\n<p>准许service访问敏感文件，语法分为两类</p>\n</blockquote>\n<ul>\n<li><h4 id=\"Short-syntax\"><a href=\"#Short-syntax\" class=\"headerlink\" title=\"Short syntax\"></a>Short syntax</h4></li>\n</ul>\n<blockquote>\n<p>只需要声明secret的名称，container只有read权限，并且文件将被mount在contianer 的/run/secrets/<secret_name>路径下</p>\n</blockquote>\n<p>文件将被挂载在/run/secrets/server-certificate</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">frontend:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">awesome/webapp</span></span><br><span class=\"line\">    <span class=\"attr\">secrets:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">server-certificate</span></span><br><span class=\"line\"><span class=\"attr\">secrets:</span></span><br><span class=\"line\">  <span class=\"attr\">server-certificate:</span></span><br><span class=\"line\">    <span class=\"attr\">file:</span> <span class=\"string\">./server.cert</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><h4 id=\"Long-syntax-1\"><a href=\"#Long-syntax-1\" class=\"headerlink\" title=\"Long syntax\"></a>Long syntax</h4><blockquote>\n</blockquote>\n<ul>\n<li><code>source</code>:  secrets项</li>\n<li><code>target</code>:  挂载在<code>/run/secrets</code>路径的文件的名称</li>\n<li><code>uid</code> and <code>gid</code>: secret 文件的owner和所属组id</li>\n<li><code>mode</code>:  unix文件权限</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">frontend:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">awesome/webapp</span></span><br><span class=\"line\">    <span class=\"attr\">secrets:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source:</span> <span class=\"string\">server-certificate</span></span><br><span class=\"line\">        <span class=\"attr\">target:</span> <span class=\"string\">server.cert</span></span><br><span class=\"line\">        <span class=\"attr\">uid:</span> <span class=\"string\">&quot;103&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">gid:</span> <span class=\"string\">&quot;103&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">mode:</span> <span class=\"number\">0440</span></span><br><span class=\"line\"><span class=\"attr\">secrets:</span></span><br><span class=\"line\">  <span class=\"attr\">server-certificate:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"volumes\"><a href=\"#volumes\" class=\"headerlink\" title=\"volumes\"></a>volumes</h4><blockquote>\n<p>定义宿主机和container容器的映射关系。语法格式分为长短两种。</p>\n<p>如果该数据卷只能由一个service使用，那么这个属性作为service的一部分，不需要额外声明顶层的volumes。</p>\n</blockquote>\n<ul>\n<li>Short Syntax</li>\n</ul>\n<blockquote>\n<p> 以分号为间隔，分为两种语法。</p>\n<ul>\n<li>volume: container_path</li>\n<li>volume: container_path: access_mode\\</li>\n</ul>\n<p>volume: 宿主机的路径或者卷的名称</p>\n<p>container_path:  卷挂载在宿主机的路径</p>\n<p>access_mode: 以逗号分隔的选项，可以是rw，ro，z，Z，读写，只读，不同容器共享，不同容器不共享。</p>\n</blockquote>\n<ul>\n<li>Long Syntax</li>\n</ul>\n<blockquote>\n<ul>\n<li><p><code>type</code>: 挂载类型 <code>volume</code>, <code>bind</code>, <code>tmpfs</code> or <code>npipe</code></p>\n</li>\n<li><p><code>source</code>: 挂载源头, 要么是宿主机的路径, 或者是[<code>top-level </code>volumes` key](<a href=\"https://docs.docker.com/compose/compose-file/#volumes-top-level-element\">https://docs.docker.com/compose/compose-file/#volumes-top-level-element</a>). Not applicable for a tmpfs mount.</p>\n</li>\n<li><p><code>target</code>: 卷挂载在container的位置</p>\n</li>\n<li><p><code>read_only</code>:  暗示卷制度</p>\n<p>: configure additional bind options</p>\n<ul>\n<li><code>propagation</code>: the propagation mode used for the bind</li>\n</ul>\n</li>\n<li><p><code>create_host_path</code>: create a directory at the source path on host if there is nothing present. Do nothing if there is something present at the path. This is automatically implied by short syntax for backward compatibility with docker-compose legacy.</p>\n</li>\n<li><p><code>selinux</code>: the SELinux re-labeling option <code>z</code> (shared) or <code>Z</code> (private)</p>\n</li>\n<li><p><code>volume</code>: configure additional volume options</p>\n<ul>\n<li><code>nocopy</code>: flag to disable copying of data from a container when a volume is created</li>\n</ul>\n</li>\n<li><p><code>tmpfs</code></p>\n<p>: configure additional tmpfs options</p>\n<ul>\n<li><code>size</code>: the size for the tmpfs mount in bytes (either numeric or as bytes unit)</li>\n</ul>\n</li>\n<li><p><code>mode</code>: the filemode for the tmpfs mount as Unix permission bits as an octal number</p>\n</li>\n<li><p><code>consistency</code>: the consistency requirements of the mount. Available values are platform specific</p>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"working-dir\"><a href=\"#working-dir\" class=\"headerlink\" title=\"working_dir\"></a>working_dir</h4><blockquote>\n<p>覆写container中由image(Dockerfile workdir)指定的工作路径</p>\n</blockquote>\n<h3 id=\"networks-1\"><a href=\"#networks-1\" class=\"headerlink\" title=\"networks\"></a>networks</h3><blockquote>\n<p>用与不同容器间的互相连通</p>\n</blockquote>\n<h4 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h4><blockquote>\n<p>设置网络名称</p>\n</blockquote>\n<h4 id=\"external\"><a href=\"#external\" class=\"headerlink\" title=\"external\"></a>external</h4><blockquote>\n<p>设置为true表示不归compose管辖</p>\n</blockquote>\n<h4 id=\"volumes-1\"><a href=\"#volumes-1\" class=\"headerlink\" title=\"volumes\"></a>volumes</h4><blockquote>\n<p>volumes是用于存储的持久化卷</p>\n</blockquote>\n<h4 id=\"name-1\"><a href=\"#name-1\" class=\"headerlink\" title=\"name\"></a>name</h4><blockquote>\n<p>指定volume的名称</p>\n</blockquote>\n<h3 id=\"configs-1\"><a href=\"#configs-1\" class=\"headerlink\" title=\"configs\"></a>configs</h3><p>The top-level <code>configs</code> declaration defines or references configuration data that can be granted to the services in this application. The source of the config is either <code>file</code> or <code>external</code>.</p>\n<blockquote>\n<p><code>configs</code>声明声明该数据授权给service的，其来源要么是文件，要么是以及存在的config。</p>\n</blockquote>\n<ul>\n<li><code>file</code>:  文件路径</li>\n<li><code>external</code>: true表明config以及被创建了（可能类似于c语言的external关键字）</li>\n<li><code>name</code>: 配置名称。 </li>\n</ul>\n<h3 id=\"secrets-1\"><a href=\"#secrets-1\" class=\"headerlink\" title=\"secrets\"></a>secrets</h3><blockquote>\n<p>同configs，只是说，configs挂载的文件权限是读写，secrets是只读。</p>\n</blockquote>\n"},{"title":"SSH基础","date":"2023-02-04T04:04:40.696Z","_content":"\n\n\n# SSH证书\n\n\n\n## 通过ssh-keygen生成证书\n\n```shell\n ssh-keygen -t rsa -b 4096\n```\n\nnote：\n\n- -t 表述加密方式(dsa | ecdsa | ecdsa-sk | ed25519 | ed25519-sk | rsa)\n\n- -b表示输出的密钥的长度\n\n\n\n接着会弹出对话框\n\n> Enter file in which to save the key (/root/.ssh/id_rsa): ssh-test （输入key文件的名称）\n\n\n\n密码（这里不设置）\n\n> Enter passphrase (empty for no passphrase):\n> Enter same passphrase again:\n\n\n\n当前路径即刻生成了rsa的公钥以及私钥\n\n> total 8.0K\n> -rw------- 1 root root 3.4K Feb  3 19:05 ssh-test\n> -rw-r--r-- 1 root root  741 Feb  3 19:05 ssh-test.pub\n\n\n\n## 配置ssh\n\n\n\n```shell\nvim ~/.ssh/config\n```\n\n\n\n```\nHost 别名\n\tHostName ip\n\tUser 用户名\n\tIdentityFile ssh私钥文件\n```\n\n\n\n","source":"_posts/safety/ssh.md","raw":"---\ntitle: SSH基础\ndate: 2023-0‎2‎-0‎4‎ ‏‎12:04:40\ntags:\n- 安全\n---\n\n\n\n# SSH证书\n\n\n\n## 通过ssh-keygen生成证书\n\n```shell\n ssh-keygen -t rsa -b 4096\n```\n\nnote：\n\n- -t 表述加密方式(dsa | ecdsa | ecdsa-sk | ed25519 | ed25519-sk | rsa)\n\n- -b表示输出的密钥的长度\n\n\n\n接着会弹出对话框\n\n> Enter file in which to save the key (/root/.ssh/id_rsa): ssh-test （输入key文件的名称）\n\n\n\n密码（这里不设置）\n\n> Enter passphrase (empty for no passphrase):\n> Enter same passphrase again:\n\n\n\n当前路径即刻生成了rsa的公钥以及私钥\n\n> total 8.0K\n> -rw------- 1 root root 3.4K Feb  3 19:05 ssh-test\n> -rw-r--r-- 1 root root  741 Feb  3 19:05 ssh-test.pub\n\n\n\n## 配置ssh\n\n\n\n```shell\nvim ~/.ssh/config\n```\n\n\n\n```\nHost 别名\n\tHostName ip\n\tUser 用户名\n\tIdentityFile ssh私钥文件\n```\n\n\n\n","slug":"safety/ssh","published":1,"updated":"2023-02-07T13:36:12.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clduaihbw0004botee7gidq3i","content":"<h1 id=\"SSH证书\"><a href=\"#SSH证书\" class=\"headerlink\" title=\"SSH证书\"></a>SSH证书</h1><h2 id=\"通过ssh-keygen生成证书\"><a href=\"#通过ssh-keygen生成证书\" class=\"headerlink\" title=\"通过ssh-keygen生成证书\"></a>通过ssh-keygen生成证书</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -b 4096</span><br></pre></td></tr></table></figure>\n\n<p>note：</p>\n<ul>\n<li><p>-t 表述加密方式(dsa | ecdsa | ecdsa-sk | ed25519 | ed25519-sk | rsa)</p>\n</li>\n<li><p>-b表示输出的密钥的长度</p>\n</li>\n</ul>\n<p>接着会弹出对话框</p>\n<blockquote>\n<p>Enter file in which to save the key (/root/.ssh/id_rsa): ssh-test （输入key文件的名称）</p>\n</blockquote>\n<p>密码（这里不设置）</p>\n<blockquote>\n<p>Enter passphrase (empty for no passphrase):<br>Enter same passphrase again:</p>\n</blockquote>\n<p>当前路径即刻生成了rsa的公钥以及私钥</p>\n<blockquote>\n<p>total 8.0K<br>-rw——- 1 root root 3.4K Feb  3 19:05 ssh-test<br>-rw-r–r– 1 root root  741 Feb  3 19:05 ssh-test.pub</p>\n</blockquote>\n<h2 id=\"配置ssh\"><a href=\"#配置ssh\" class=\"headerlink\" title=\"配置ssh\"></a>配置ssh</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.ssh/config</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host 别名</span><br><span class=\"line\">\tHostName ip</span><br><span class=\"line\">\tUser 用户名</span><br><span class=\"line\">\tIdentityFile ssh私钥文件</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"SSH证书\"><a href=\"#SSH证书\" class=\"headerlink\" title=\"SSH证书\"></a>SSH证书</h1><h2 id=\"通过ssh-keygen生成证书\"><a href=\"#通过ssh-keygen生成证书\" class=\"headerlink\" title=\"通过ssh-keygen生成证书\"></a>通过ssh-keygen生成证书</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -b 4096</span><br></pre></td></tr></table></figure>\n\n<p>note：</p>\n<ul>\n<li><p>-t 表述加密方式(dsa | ecdsa | ecdsa-sk | ed25519 | ed25519-sk | rsa)</p>\n</li>\n<li><p>-b表示输出的密钥的长度</p>\n</li>\n</ul>\n<p>接着会弹出对话框</p>\n<blockquote>\n<p>Enter file in which to save the key (/root/.ssh/id_rsa): ssh-test （输入key文件的名称）</p>\n</blockquote>\n<p>密码（这里不设置）</p>\n<blockquote>\n<p>Enter passphrase (empty for no passphrase):<br>Enter same passphrase again:</p>\n</blockquote>\n<p>当前路径即刻生成了rsa的公钥以及私钥</p>\n<blockquote>\n<p>total 8.0K<br>-rw——- 1 root root 3.4K Feb  3 19:05 ssh-test<br>-rw-r–r– 1 root root  741 Feb  3 19:05 ssh-test.pub</p>\n</blockquote>\n<h2 id=\"配置ssh\"><a href=\"#配置ssh\" class=\"headerlink\" title=\"配置ssh\"></a>配置ssh</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.ssh/config</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host 别名</span><br><span class=\"line\">\tHostName ip</span><br><span class=\"line\">\tUser 用户名</span><br><span class=\"line\">\tIdentityFile ssh私钥文件</span><br></pre></td></tr></table></figure>\n\n\n\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cldu9nn990001rstegyho2o9d","tag_id":"cldu9u08000085wtegkz75pnh","_id":"cldu9u08100095wte1nbkc2ma"},{"post_id":"cldu9nn990001rstegyho2o9d","tag_id":"cldu9u1r4000a5wte2pp32m0a","_id":"cldu9u1r7000b5wte1o6bgmxo"},{"post_id":"clduaihbb0000bote6w9i6u2k","tag_id":"cldu9ulrx000f5wte94yhhbj1","_id":"clduaihbj0002bote999gf1bb"},{"post_id":"clduaihbh0001bote7k7164n7","tag_id":"cldu9vf4c000p5wtebvf66j4j","_id":"clduaihbk0003bote7rur1v7o"},{"post_id":"clduaihbw0004botee7gidq3i","tag_id":"cldu9ulrx000f5wte94yhhbj1","_id":"clduaihc90005bote0m6l8ba0"}],"Tag":[{"name":"a","_id":"cldu9rnlf0000hkte3u5edh74"},{"name":"b","_id":"cldu9rshb0002hktec78t2wrw"},{"name":"c","_id":"cldu9rtks0005hktehor34hwl"},{"name":"bing","_id":"cldu9tt0v00005wte8cc68b8c"},{"name":"并发","_id":"cldu9tu9000025wte8ubqccyi"},{"name":"duo'xi","_id":"cldu9tw8800045wte13ahh2pq"},{"name":"多线程bing'fa","_id":"cldu9txlx00065wtee1a3750v"},{"name":"多线程并发","_id":"cldu9u08000085wtegkz75pnh"},{"name":"Java","_id":"cldu9u1r4000a5wte2pp32m0a"},{"name":"基础","_id":"cldu9u97m000c5wtedbglcih2"},{"name":"安全","_id":"cldu9ulrx000f5wte94yhhbj1"},{"name":"an","_id":"cldu9uvvg000h5wte6nve3d6m"},{"name":"docker co","_id":"cldu9v7ki000j5wteczfc0lyz"},{"name":"docker compose","_id":"cldu9v9hs000l5wte6qta3vjw"},{"name":"devop","_id":"cldu9veie000n5wteed1ofwn8"},{"name":"devops","_id":"cldu9vf4c000p5wtebvf66j4j"}]}}